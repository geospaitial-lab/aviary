{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Get Started","text":"<p>aviary provides composable components for tile-based processing of geospatial data. This enables you to easily run models on large datasets, export the predictions in a georeferenced file format and postprocess them for further downstream tasks. Besides the pipelines, aviary also provides task-specific models for remote sensing applications.</p> <p>aviary is designed upon the following concepts:</p> <ul> <li> <p>High-level Python API     Abstract components for building pipelines without boilerplate code</p> </li> <li> <p>Command-line interface (CLI)     Run the pre-built pipelines easily without writing any code</p> </li> <li> <p>Customizable pipelines     Compose your own pipelines with the provided components</p> </li> <li> <p>Extensible components     Add your own components to the pipeline</p> </li> <li> <p>Support for large datasets     Tile-based processing for large datasets (local, remote or web services)</p> </li> <li> <p>Support for geospatial data     Export predictions as geodata, ready for downstream tasks</p> </li> <li> <p>Task-agnostic     Process geospatial data with a range of machine learning tasks</p> </li> <li> <p>ML-framework agnostic     Use your favorite machine learning framework</p> </li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>You can choose between two installation methods, whether you need access to the Python API or the command-line interface (CLI) only. If you just want to use the pre-built pipelines with the command-line interface, you can use the Docker image.</p> <p>\u26a0\ufe0f Note: aviary is currently released as a pre-release version. To install the latest version, you need to add the <code>--pre</code> flag.</p> pipuvDocker <pre><code>pip install geospaitial-lab-aviary\n</code></pre> <p>Note that aviary requires Python 3.10 or later.</p> <p>Have a look at the installation guide for further information.</p> <pre><code>uv pip install geospaitial-lab-aviary\n</code></pre> <p>Note that aviary requires Python 3.10 or later.</p> <p>Have a look at the installation guide for further information.</p> <pre><code>docker pull ghcr.io/geospaitial-lab/aviary\n</code></pre> <p>Have a look at the installation guide for further information.</p>"},{"location":"#next-steps","title":"Next steps","text":"<p>Have a look at the how-to guides to get started.</p>"},{"location":"#about","title":"About","text":"<p>aviary is developed by the geospaitial lab  at the Westf\u00e4lische Hochschule - Westphalian University of Applied Sciences in Gelsenkirchen, Germany.</p>"},{"location":"legal_notice/","title":"Legal notice","text":""},{"location":"legal_notice/#legal-notice","title":"Legal Notice","text":"<p>TODO</p>"},{"location":"privacy_policy/","title":"Privacy policy","text":""},{"location":"privacy_policy/#privacy-policy","title":"Privacy Policy","text":"<p>TODO</p>"},{"location":"api_reference/","title":"API Reference","text":"<p>aviary\u2019s Python API includes the following subpackages:</p> <ul> <li> <p><code>aviary</code>     Core types</p> </li> <li> <p><code>aviary.pipeline</code>     Pre-built pipelines</p> </li> <li> <p><code>aviary.tile</code>     Components for tile-based processing</p> </li> <li> <p><code>aviary.utils</code>     Utilities</p> </li> </ul>"},{"location":"api_reference/core/bounding_box/","title":"BoundingBox","text":"<p>View source </p>"},{"location":"api_reference/core/bounding_box/#aviary.BoundingBox","title":"<code>BoundingBox</code>","text":"<p>               Bases: <code>Iterable[Coordinate]</code></p> <p>A bounding box specifies the spatial extent of an area of interest.</p> PARAMETER DESCRIPTION <code>x_min</code> <p>Minimum x coordinate in meters</p> <p> TYPE: <code>Coordinate</code> </p> <code>y_min</code> <p>Minimum y coordinate in meters</p> <p> TYPE: <code>Coordinate</code> </p> <code>x_max</code> <p>Maximum x coordinate in meters</p> <p> TYPE: <code>Coordinate</code> </p> <code>y_max</code> <p>Maximum y coordinate in meters</p> <p> TYPE: <code>Coordinate</code> </p>"},{"location":"api_reference/core/bounding_box/#aviary.BoundingBox.x_min","title":"<code>x_min</code>  <code>property</code>","text":"RETURNS DESCRIPTION <code>Coordinate</code> <p>Minimum x coordinate in meters</p>"},{"location":"api_reference/core/bounding_box/#aviary.BoundingBox.y_min","title":"<code>y_min</code>  <code>property</code>","text":"RETURNS DESCRIPTION <code>Coordinate</code> <p>Minimum y coordinate in meters</p>"},{"location":"api_reference/core/bounding_box/#aviary.BoundingBox.x_max","title":"<code>x_max</code>  <code>property</code>","text":"RETURNS DESCRIPTION <code>Coordinate</code> <p>Maximum x coordinate in meters</p>"},{"location":"api_reference/core/bounding_box/#aviary.BoundingBox.y_max","title":"<code>y_max</code>  <code>property</code>","text":"RETURNS DESCRIPTION <code>Coordinate</code> <p>Maximum y coordinate in meters</p>"},{"location":"api_reference/core/bounding_box/#aviary.BoundingBox.area","title":"<code>area</code>  <code>property</code>","text":"RETURNS DESCRIPTION <code>int</code> <p>Area in square meters</p>"},{"location":"api_reference/core/bounding_box/#aviary.BoundingBox.from_gdf","title":"<code>from_gdf</code>  <code>classmethod</code>","text":"<p>Creates a bounding box from a geodataframe.</p> PARAMETER DESCRIPTION <code>gdf</code> <p>Geodataframe</p> <p> TYPE: <code>gpd.GeoDataFrame</code> </p> RETURNS DESCRIPTION <code>BoundingBox</code> <p>Bounding box</p>"},{"location":"api_reference/core/bounding_box/#aviary.BoundingBox.__eq__","title":"<code>__eq__</code>","text":"<p>Compares the bounding boxes.</p> PARAMETER DESCRIPTION <code>other</code> <p>Other bounding box</p> <p> TYPE: <code>object</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if the bounding boxes are equal, False otherwise</p>"},{"location":"api_reference/core/bounding_box/#aviary.BoundingBox.__len__","title":"<code>__len__</code>","text":"<p>Computes the number of coordinates.</p> RETURNS DESCRIPTION <code>int</code> <p>Number of coordinates</p>"},{"location":"api_reference/core/bounding_box/#aviary.BoundingBox.__getitem__","title":"<code>__getitem__</code>","text":"<p>Returns the coordinate.</p> PARAMETER DESCRIPTION <code>index</code> <p>Index of the coordinate</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>Coordinate</code> <p>Coordinate in meters</p>"},{"location":"api_reference/core/bounding_box/#aviary.BoundingBox.__iter__","title":"<code>__iter__</code>","text":"<p>Iterates over the coordinates.</p> YIELDS DESCRIPTION <code>Coordinate</code> <p>Coordinate in meters</p>"},{"location":"api_reference/core/bounding_box/#aviary.BoundingBox.__and__","title":"<code>__and__</code>","text":"<p>Intersects the bounding boxes.</p> PARAMETER DESCRIPTION <code>other</code> <p>Other bounding box</p> <p> TYPE: <code>BoundingBox</code> </p> RETURNS DESCRIPTION <code>BoundingBox</code> <p>Bounding box</p>"},{"location":"api_reference/core/bounding_box/#aviary.BoundingBox.__or__","title":"<code>__or__</code>","text":"<p>Unions the bounding boxes.</p> PARAMETER DESCRIPTION <code>other</code> <p>Other bounding box</p> <p> TYPE: <code>BoundingBox</code> </p> RETURNS DESCRIPTION <code>BoundingBox</code> <p>Bounding box</p>"},{"location":"api_reference/core/bounding_box/#aviary.BoundingBox.buffer","title":"<code>buffer</code>","text":"<p>Buffers the bounding box.</p> Notes <ul> <li>A positive buffer size expands the bounding box</li> <li>A negative buffer size shrinks the bounding box</li> </ul> Example <p>Assume the area of interest is specified by <code>x_min</code>=363084, <code>y_min</code>=5715326, <code>x_max</code>=363340, and <code>y_max</code>=5715582.</p> <p>You can expand the area of interest by buffering the bounding box.</p> <pre><code>bounding_box = BoundingBox(\n    x_min=363084,\n    y_min=5715326,\n    x_max=363340,\n    y_max=5715582,\n)\nbounding_box = bounding_box.buffer(buffer_size=64)\nprint(bounding_box)\n</code></pre> Output<pre><code>BoundingBox(\n    x_min=363020,\n    y_min=5715262,\n    x_max=363404,\n    y_max=5715646,\n)\n</code></pre> PARAMETER DESCRIPTION <code>buffer_size</code> <p>Buffer size in meters</p> <p> TYPE: <code>BufferSize</code> </p> <code>inplace</code> <p>If True, the bounding box is buffered inplace</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>BoundingBox</code> <p>Bounding box</p>"},{"location":"api_reference/core/bounding_box/#aviary.BoundingBox.snap","title":"<code>snap</code>","text":"<p>Snaps the bounding box.</p> Example <p>Assume the area of interest is specified by <code>x_min</code>=363084, <code>y_min</code>=5715326, <code>x_max</code>=363340, and <code>y_max</code>=5715582.</p> <p>You can align the area of interest to a grid by snapping the bounding box.</p> <pre><code>bounding_box = BoundingBox(\n    x_min=363084,\n    y_min=5715326,\n    x_max=363340,\n    y_max=5715582,\n)\nbounding_box = bounding_box.snap(value=128)\nprint(bounding_box)\n</code></pre> Output<pre><code>BoundingBox(\n    x_min=363008,\n    y_min=5715200,\n    x_max=363392,\n    y_max=5715584,\n)\n</code></pre> PARAMETER DESCRIPTION <code>value</code> <p>Value to snap the coordinates to in meters</p> <p> TYPE: <code>int</code> </p> <code>inplace</code> <p>If True, the bounding box is snapped inplace</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>BoundingBox</code> <p>Bounding box</p>"},{"location":"api_reference/core/bounding_box/#aviary.BoundingBox.to_gdf","title":"<code>to_gdf</code>","text":"<p>Converts the bounding box to a geodataframe.</p> PARAMETER DESCRIPTION <code>epsg_code</code> <p>EPSG code</p> <p> TYPE: <code>EPSGCode | None</code> </p> RETURNS DESCRIPTION <code>gpd.GeoDataFrame</code> <p>Geodataframe</p>"},{"location":"api_reference/core/enums/","title":"Enums","text":"<p>View source </p>"},{"location":"api_reference/core/enums/#aviary.ChannelName","title":"<code>ChannelName</code>","text":"<p>               Bases: <code>Enum</code></p> ATTRIBUTE DESCRIPTION <code>B</code> <p>Blue channel</p> <p> </p> <code>G</code> <p>Green channel</p> <p> </p> <code>NIR</code> <p>Near-infrared channel</p> <p> </p> <code>R</code> <p>Red channel</p> <p> </p>"},{"location":"api_reference/core/enums/#aviary.GeospatialFilterMode","title":"<code>GeospatialFilterMode</code>","text":"<p>               Bases: <code>Enum</code></p> ATTRIBUTE DESCRIPTION <code>DIFFERENCE</code> <p>Difference mode</p> <p> </p> <code>INTERSECTION</code> <p>Intersection mode</p> <p> </p>"},{"location":"api_reference/core/enums/#aviary.InterpolationMode","title":"<code>InterpolationMode</code>","text":"<p>               Bases: <code>Enum</code></p> ATTRIBUTE DESCRIPTION <code>BILINEAR</code> <p>Bilinear mode</p> <p> </p> <code>NEAREST</code> <p>Nearest mode</p> <p> </p>"},{"location":"api_reference/core/enums/#aviary.SetFilterMode","title":"<code>SetFilterMode</code>","text":"<p>               Bases: <code>Enum</code></p> ATTRIBUTE DESCRIPTION <code>DIFFERENCE</code> <p>Difference mode</p> <p> </p> <code>INTERSECTION</code> <p>Intersection mode</p> <p> </p> <code>UNION</code> <p>Union mode</p> <p> </p>"},{"location":"api_reference/core/enums/#aviary.WMSVersion","title":"<code>WMSVersion</code>","text":"<p>               Bases: <code>Enum</code></p> ATTRIBUTE DESCRIPTION <code>V1_1_1</code> <p>Version 1.1.1</p> <p> </p> <code>V1_3_0</code> <p>Version 1.3.0</p> <p> </p>"},{"location":"api_reference/core/exceptions/","title":"Exceptions","text":"<p>View source </p>"},{"location":"api_reference/core/exceptions/#aviary.AviaryUserError","title":"<code>AviaryUserError</code>","text":"<p>               Bases: <code>ValueError</code></p>"},{"location":"api_reference/core/exceptions/#aviary.AviaryUserWarning","title":"<code>AviaryUserWarning</code>","text":"<p>               Bases: <code>Warning</code></p>"},{"location":"api_reference/core/grid/","title":"Grid","text":"<p>View source </p>"},{"location":"api_reference/core/grid/#aviary.Grid","title":"<code>Grid</code>","text":"<p>               Bases: <code>Iterable[Coordinates]</code></p> <p>A grid specifies the spatial extent of an area of interest by a set of coordinates of the bottom left corner of each tile and the tile size.</p> Notes <ul> <li>The coordinates are assumed to be in shape (n, 2) and data type int32, where n is the number of coordinates</li> <li>The coordinates are sorted</li> </ul> PARAMETER DESCRIPTION <code>coordinates</code> <p>Coordinates (x_min, y_min) of each tile in meters</p> <p> TYPE: <code>CoordinatesSet | None</code> </p> <code>tile_size</code> <p>Tile size in meters</p> <p> TYPE: <code>TileSize</code> </p>"},{"location":"api_reference/core/grid/#aviary.Grid.coordinates","title":"<code>coordinates</code>  <code>property</code>","text":"RETURNS DESCRIPTION <code>CoordinatesSet</code> <p>Coordinates (x_min, y_min) of each tile in meters</p>"},{"location":"api_reference/core/grid/#aviary.Grid.tile_size","title":"<code>tile_size</code>  <code>property</code>","text":"RETURNS DESCRIPTION <code>TileSize</code> <p>Tile size in meters</p>"},{"location":"api_reference/core/grid/#aviary.Grid.area","title":"<code>area</code>  <code>property</code>","text":"RETURNS DESCRIPTION <code>int</code> <p>Area in square meters</p>"},{"location":"api_reference/core/grid/#aviary.Grid.from_bounding_box","title":"<code>from_bounding_box</code>  <code>classmethod</code>","text":"<p>Creates a grid from a bounding box.</p> PARAMETER DESCRIPTION <code>bounding_box</code> <p>Bounding box</p> <p> TYPE: <code>BoundingBox</code> </p> <code>tile_size</code> <p>Tile size in meters</p> <p> TYPE: <code>TileSize</code> </p> <code>snap</code> <p>If True, the bounding box is snapped to <code>tile_size</code></p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>Grid</code> <p>Grid</p>"},{"location":"api_reference/core/grid/#aviary.Grid.from_gdf","title":"<code>from_gdf</code>  <code>classmethod</code>","text":"<p>Creates a grid from a geodataframe.</p> PARAMETER DESCRIPTION <code>gdf</code> <p>Geodataframe</p> <p> TYPE: <code>gpd.GeoDataFrame</code> </p> <code>tile_size</code> <p>Tile size in meters</p> <p> TYPE: <code>TileSize</code> </p> <code>snap</code> <p>If True, the bounding box is snapped to <code>tile_size</code></p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>Grid</code> <p>Grid</p>"},{"location":"api_reference/core/grid/#aviary.Grid.from_json","title":"<code>from_json</code>  <code>classmethod</code>","text":"<p>Creates a grid from a JSON string.</p> Notes <ul> <li>The JSON string contains a list of coordinates (x_min, y_min) of each tile and the tile size</li> </ul> Example <p>Assume the JSON string is '{\"coordinates\": [[363084, 5715326], [363212, 5715326], [363084, 5715454], [363212, 5715454]], \"tile_size\": 128}'.</p> <p>You can create a grid from the JSON string.</p> <pre><code>grid = Grid.from_json(\n    json_string=(\n        '{\"coordinates\": '\n        '[[363084, 5715326], '\n        '[363212, 5715326], '\n        '[363084, 5715454], '\n        '[363212, 5715454]], '\n        '\"tile_size\": 128}'\n    ),\n)\n</code></pre> PARAMETER DESCRIPTION <code>json_string</code> <p>JSON string</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Grid</code> <p>Grid</p>"},{"location":"api_reference/core/grid/#aviary.Grid.from_grids","title":"<code>from_grids</code>  <code>classmethod</code>","text":"<p>Creates a grid from grids.</p> PARAMETER DESCRIPTION <code>grids</code> <p>Grids</p> <p> TYPE: <code>list[Grid]</code> </p> RETURNS DESCRIPTION <code>Grid</code> <p>Grid</p>"},{"location":"api_reference/core/grid/#aviary.Grid.from_config","title":"<code>from_config</code>  <code>classmethod</code>","text":"<p>Creates a grid from the configuration.</p> PARAMETER DESCRIPTION <code>config</code> <p>Configuration</p> <p> TYPE: <code>GridConfig</code> </p> RETURNS DESCRIPTION <code>Grid</code> <p>Grid</p>"},{"location":"api_reference/core/grid/#aviary.Grid.__eq__","title":"<code>__eq__</code>","text":"<p>Compares the grids.</p> PARAMETER DESCRIPTION <code>other</code> <p>Other grid</p> <p> TYPE: <code>object</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if the grids are equal, False otherwise</p>"},{"location":"api_reference/core/grid/#aviary.Grid.__len__","title":"<code>__len__</code>","text":"<p>Computes the number of coordinates.</p> RETURNS DESCRIPTION <code>int</code> <p>Number of coordinates</p>"},{"location":"api_reference/core/grid/#aviary.Grid.__bool__","title":"<code>__bool__</code>","text":"<p>Checks if the grid contains coordinates.</p> RETURNS DESCRIPTION <code>bool</code> <p>True if the grid contains coordinates, False otherwise</p>"},{"location":"api_reference/core/grid/#aviary.Grid.__contains__","title":"<code>__contains__</code>","text":"<p>Checks if the coordinates are in the grid.</p> PARAMETER DESCRIPTION <code>coordinates</code> <p>Coordinates (x_min, y_min) of the tile in meters</p> <p> TYPE: <code>Coordinates | CoordinatesSet</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if the coordinates are in the grid, False otherwise</p>"},{"location":"api_reference/core/grid/#aviary.Grid.__getitem__","title":"<code>__getitem__</code>","text":"<p>Returns the coordinates or the sliced grid.</p> PARAMETER DESCRIPTION <code>index</code> <p>Index or slice of the coordinates</p> <p> TYPE: <code>int | slice</code> </p> RETURNS DESCRIPTION <code>Coordinates | Grid</code> <p>Coordinates (x_min, y_min) of the tile in meters or grid</p>"},{"location":"api_reference/core/grid/#aviary.Grid.__iter__","title":"<code>__iter__</code>","text":"<p>Iterates over the coordinates.</p> YIELDS DESCRIPTION <code>Coordinates</code> <p>Coordinates (x_min, y_min) of the tile in meters</p>"},{"location":"api_reference/core/grid/#aviary.Grid.__add__","title":"<code>__add__</code>","text":"<p>Adds the grids.</p> PARAMETER DESCRIPTION <code>other</code> <p>Other grid</p> <p> TYPE: <code>Grid</code> </p> RETURNS DESCRIPTION <code>Grid</code> <p>Grid</p>"},{"location":"api_reference/core/grid/#aviary.Grid.__sub__","title":"<code>__sub__</code>","text":"<p>Subtracts the grids.</p> PARAMETER DESCRIPTION <code>other</code> <p>Other grid</p> <p> TYPE: <code>Grid</code> </p> RETURNS DESCRIPTION <code>Grid</code> <p>Grid</p>"},{"location":"api_reference/core/grid/#aviary.Grid.__and__","title":"<code>__and__</code>","text":"<p>Intersects the grids.</p> PARAMETER DESCRIPTION <code>other</code> <p>Other grid</p> <p> TYPE: <code>Grid</code> </p> RETURNS DESCRIPTION <code>Grid</code> <p>Grid</p>"},{"location":"api_reference/core/grid/#aviary.Grid.__or__","title":"<code>__or__</code>","text":"<p>Unions the grids.</p> PARAMETER DESCRIPTION <code>other</code> <p>Other grid</p> <p> TYPE: <code>Grid</code> </p> RETURNS DESCRIPTION <code>Grid</code> <p>Grid</p>"},{"location":"api_reference/core/grid/#aviary.Grid.append","title":"<code>append</code>","text":"<p>Appends the coordinates.</p> PARAMETER DESCRIPTION <code>coordinates</code> <p>Coordinates (x_min, y_min) of the tile or of each tile in meters</p> <p> TYPE: <code>Coordinates | CoordinatesSet</code> </p> <code>inplace</code> <p>If True, the coordinates are appended inplace</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Grid</code> <p>Grid</p>"},{"location":"api_reference/core/grid/#aviary.Grid.chunk","title":"<code>chunk</code>","text":"<p>Chunks the grid.</p> PARAMETER DESCRIPTION <code>num_chunks</code> <p>Number of chunks</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>list[Grid]</code> <p>Grids</p>"},{"location":"api_reference/core/grid/#aviary.Grid.filter","title":"<code>filter</code>","text":"<p>Filters the grid.</p> PARAMETER DESCRIPTION <code>coordinates_filter</code> <p>Coordinates filter</p> <p> TYPE: <code>CoordinatesFilter</code> </p> <code>inplace</code> <p>If True, the coordinates are filtered inplace</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Grid</code> <p>Grid</p>"},{"location":"api_reference/core/grid/#aviary.Grid.remove","title":"<code>remove</code>","text":"<p>Removes the coordinates.</p> PARAMETER DESCRIPTION <code>coordinates</code> <p>Coordinates (x_min, y_min) of the tile or of each tile in meters</p> <p> TYPE: <code>Coordinates | CoordinatesSet</code> </p> <code>inplace</code> <p>If True, the coordinates are removed inplace</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Grid</code> <p>Grid</p>"},{"location":"api_reference/core/grid/#aviary.Grid.snap","title":"<code>snap</code>","text":"<p>Snaps the coordinates to the tile size.</p> PARAMETER DESCRIPTION <code>inplace</code> <p>If True, the coordinates are snapped inplace</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Grid</code> <p>Grid</p>"},{"location":"api_reference/core/grid/#aviary.Grid.to_gdf","title":"<code>to_gdf</code>","text":"<p>Converts the grid to a geodataframe.</p> PARAMETER DESCRIPTION <code>epsg_code</code> <p>EPSG code</p> <p> TYPE: <code>EPSGCode | None</code> </p> RETURNS DESCRIPTION <code>gpd.GeoDataFrame</code> <p>Geodataframe</p>"},{"location":"api_reference/core/grid/#aviary.Grid.to_json","title":"<code>to_json</code>","text":"<p>Converts the grid to a JSON string.</p> Notes <ul> <li>The JSON string contains a list of coordinates (x_min, y_min) of each tile and the tile size</li> </ul> RETURNS DESCRIPTION <code>str</code> <p>JSON string</p>"},{"location":"api_reference/core/grid/#aviary.GridConfig","title":"<code>GridConfig</code>","text":"<p>               Bases: <code>pydantic.BaseModel</code></p> <p>Configuration for the <code>from_config</code> class method of <code>Grid</code></p> The configuration must have exactly one of the following field combinations <ul> <li><code>coordinates</code> and <code>tile_size</code></li> <li><code>bounding_box_coordinates</code> and <code>tile_size</code></li> <li><code>gpkg_path</code> and <code>tile_size</code></li> <li><code>json_path</code></li> </ul> Create the configuration from a config file <ul> <li>Use null instead of None</li> <li>Use false or true instead of False or True</li> </ul> Example <p>You can create the configuration from a config file.</p> config.yaml<pre><code>coordinates: null\nbounding_box_coordinates:\n  - 363084\n  - 5715326\n  - 363340\n  - 5715582\ngpkg_path: null\njson_path: null\nignore_coordinates: null\nignore_bounding_box_coordinates: null\nignore_gpkg_path: null\nignore_json_path: null\ntile_size: 128\nsnap: true\nnum_chunks: null\nchunk: null\n</code></pre> ATTRIBUTE DESCRIPTION <code>coordinates</code> <p>Coordinates (x_min, y_min) of each tile in meters - defaults to None</p> <p> TYPE: <code>list[Coordinates] | None</code> </p> <code>bounding_box_coordinates</code> <p>Bounding box coordinates (x_min, y_min, x_max, y_max) in meters - defaults to None</p> <p> TYPE: <code>tuple[Coordinate, Coordinate, Coordinate, Coordinate] | None</code> </p> <code>gpkg_path</code> <p>Path to the geopackage (.gpkg file) - defaults to None</p> <p> TYPE: <code>Path | None</code> </p> <code>json_path</code> <p>Path to the JSON file (.json file) - defaults to None</p> <p> TYPE: <code>Path | None</code> </p> <code>ignore_coordinates</code> <p>Coordinates (x_min, y_min) of each tile to ignore - defaults to None</p> <p> TYPE: <code>list[Coordinates] | None</code> </p> <code>ignore_bounding_box_coordinates</code> <p>Bounding box coordinates to ignore (x_min, y_min, x_max, y_max) in meters - defaults to None</p> <p> TYPE: <code>tuple[Coordinate, Coordinate, Coordinate, Coordinate] | None</code> </p> <code>ignore_gpkg_path</code> <p>Path to the geopackage (.gpkg file) to ignore - defaults to None</p> <p> TYPE: <code>Path | None</code> </p> <code>ignore_json_path</code> <p>Path to the JSON file (.json file) to ignore - defaults to None</p> <p> TYPE: <code>Path | None</code> </p> <code>tile_size</code> <p>Tile size in meters - defaults to None</p> <p> TYPE: <code>TileSize | None</code> </p> <code>snap</code> <p>If True, the bounding box is snapped to <code>tile_size</code> - defaults to True</p> <p> TYPE: <code>bool</code> </p> <code>num_chunks</code> <p>Number of chunks - defaults to None</p> <p> TYPE: <code>int | None</code> </p> <code>chunk</code> <p>Chunk - defaults to None</p> <p> TYPE: <code>int | None</code> </p>"},{"location":"api_reference/core/tiles/","title":"Tiles","text":"<p>View source </p>"},{"location":"api_reference/core/tiles/#aviary.Tiles","title":"<code>Tiles</code>","text":"<p>               Bases: <code>Iterable[Channel]</code></p> <p>The tiles specify the channels and their spatial extent.</p> Notes <ul> <li>The type alias <code>Tile</code> can be used for semantic consistency if it specifies a single tile     instead of a batch of tiles</li> <li>The <code>channels</code> property returns a reference to the channels</li> <li>The <code>metadata</code> property returns a reference to the metadata</li> <li>The dunder methods <code>__getattr__</code>, <code>__getitem__</code>, and <code>__iter__</code> return or yield a reference to a channel</li> </ul> PARAMETER DESCRIPTION <code>channels</code> <p>Channels</p> <p> TYPE: <code>list[Channel]</code> </p> <code>coordinates</code> <p>Coordinates (x_min, y_min) of the tile or of each tile in meters</p> <p> TYPE: <code>Coordinates | CoordinatesSet</code> </p> <code>tile_size</code> <p>Tile size in meters</p> <p> TYPE: <code>TileSize</code> </p> <code>metadata</code> <p>Metadata</p> <p> TYPE: <code>dict[str, object] | None</code> DEFAULT: <code>None</code> </p> <code>copy</code> <p>If True, the channels and metadata are copied during initialization</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"api_reference/core/tiles/#aviary.Tiles.channels","title":"<code>channels</code>  <code>property</code>","text":"RETURNS DESCRIPTION <code>list[Channel]</code> <p>Channels</p>"},{"location":"api_reference/core/tiles/#aviary.Tiles.coordinates","title":"<code>coordinates</code>  <code>property</code>","text":"RETURNS DESCRIPTION <code>CoordinatesSet</code> <p>Coordinates (x_min, y_min) of each tile in meters</p>"},{"location":"api_reference/core/tiles/#aviary.Tiles.tile_size","title":"<code>tile_size</code>  <code>property</code>","text":"RETURNS DESCRIPTION <code>TileSize</code> <p>Tile size in meters</p>"},{"location":"api_reference/core/tiles/#aviary.Tiles.metadata","title":"<code>metadata</code>  <code>property</code> <code>writable</code>","text":"RETURNS DESCRIPTION <code>dict[str, object]</code> <p>Metadata</p>"},{"location":"api_reference/core/tiles/#aviary.Tiles.is_copied","title":"<code>is_copied</code>  <code>property</code>","text":"RETURNS DESCRIPTION <code>bool</code> <p>If True, the channels and metadata are copied during initialization</p>"},{"location":"api_reference/core/tiles/#aviary.Tiles.area","title":"<code>area</code>  <code>property</code>","text":"RETURNS DESCRIPTION <code>int</code> <p>Area in square meters</p>"},{"location":"api_reference/core/tiles/#aviary.Tiles.batch_size","title":"<code>batch_size</code>  <code>property</code>","text":"RETURNS DESCRIPTION <code>int</code> <p>Batch size</p>"},{"location":"api_reference/core/tiles/#aviary.Tiles.channel_names","title":"<code>channel_names</code>  <code>property</code>","text":"RETURNS DESCRIPTION <code>ChannelNameSet</code> <p>Channel names</p>"},{"location":"api_reference/core/tiles/#aviary.Tiles.grid","title":"<code>grid</code>  <code>property</code>","text":"RETURNS DESCRIPTION <code>Grid</code> <p>Grid</p>"},{"location":"api_reference/core/tiles/#aviary.Tiles.from_composite_raster","title":"<code>from_composite_raster</code>  <code>classmethod</code>","text":"<p>Creates tiles from composite raster data.</p> PARAMETER DESCRIPTION <code>data</code> <p>Data</p> <p> TYPE: <code>npt.NDArray</code> </p> <code>channel_names</code> <p>Channel name or channel names (if None, the channel is ignored)</p> <p> TYPE: <code>ChannelName | str | list[ChannelName | str | None] | None</code> </p> <code>coordinates</code> <p>Coordinates (x_min, y_min) of the tile in meters</p> <p> TYPE: <code>Coordinates</code> </p> <code>tile_size</code> <p>Tile size in meters</p> <p> TYPE: <code>TileSize</code> </p> <code>buffer_size</code> <p>Buffer size in meters</p> <p> TYPE: <code>BufferSize</code> DEFAULT: <code>0</code> </p> <code>metadata</code> <p>Metadata</p> <p> TYPE: <code>dict[str, object] | None</code> DEFAULT: <code>None</code> </p> <code>copy</code> <p>If True, the channels and metadata are copied during initialization</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Tiles</code> <p>Tiles</p>"},{"location":"api_reference/core/tiles/#aviary.Tiles.from_tiles","title":"<code>from_tiles</code>  <code>classmethod</code>","text":"<p>Creates tiles from tiles.</p> PARAMETER DESCRIPTION <code>tiles</code> <p>Tiles</p> <p> TYPE: <code>list[Tiles]</code> </p> <code>copy</code> <p>If True, the channels and metadata are copied during initialization</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Tiles</code> <p>Tiles</p>"},{"location":"api_reference/core/tiles/#aviary.Tiles.__eq__","title":"<code>__eq__</code>","text":"<p>Compares the tiles.</p> PARAMETER DESCRIPTION <code>other</code> <p>Other tiles</p> <p> TYPE: <code>object</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if the tiles are equal, False otherwise</p>"},{"location":"api_reference/core/tiles/#aviary.Tiles.__len__","title":"<code>__len__</code>","text":"<p>Computes the number of channels.</p> RETURNS DESCRIPTION <code>int</code> <p>Number of channels</p>"},{"location":"api_reference/core/tiles/#aviary.Tiles.__bool__","title":"<code>__bool__</code>","text":"<p>Checks if the tiles contain channels.</p> RETURNS DESCRIPTION <code>bool</code> <p>True if the tiles contain channels, False otherwise</p>"},{"location":"api_reference/core/tiles/#aviary.Tiles.__contains__","title":"<code>__contains__</code>","text":"<p>Checks if the channel is in the tiles.</p> PARAMETER DESCRIPTION <code>channel_name</code> <p>Channel name</p> <p> TYPE: <code>ChannelName | str</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if the channel is in the tiles, False otherwise</p>"},{"location":"api_reference/core/tiles/#aviary.Tiles.__getattr__","title":"<code>__getattr__</code>","text":"<p>Returns the channel.</p> PARAMETER DESCRIPTION <code>channel_name</code> <p>Channel name</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Channel</code> <p>Channel</p>"},{"location":"api_reference/core/tiles/#aviary.Tiles.__getitem__","title":"<code>__getitem__</code>","text":"<p>Returns the channel.</p> PARAMETER DESCRIPTION <code>channel_name</code> <p>Channel name</p> <p> TYPE: <code>ChannelName | str</code> </p> RETURNS DESCRIPTION <code>Channel</code> <p>Channel</p>"},{"location":"api_reference/core/tiles/#aviary.Tiles.__iter__","title":"<code>__iter__</code>","text":"<p>Iterates over the channels.</p> YIELDS DESCRIPTION <code>Channel</code> <p>Channel</p>"},{"location":"api_reference/core/tiles/#aviary.Tiles.__add__","title":"<code>__add__</code>","text":"<p>Adds the tiles.</p> PARAMETER DESCRIPTION <code>other</code> <p>Other tiles</p> <p> TYPE: <code>Tiles</code> </p> RETURNS DESCRIPTION <code>Tiles</code> <p>Tiles</p>"},{"location":"api_reference/core/tiles/#aviary.Tiles.append","title":"<code>append</code>","text":"<p>Appends the channels.</p> PARAMETER DESCRIPTION <code>channels</code> <p>Channels</p> <p> TYPE: <code>Channel | list[Channel]</code> </p> <code>inplace</code> <p>If True, the channels are appended inplace</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Tiles</code> <p>Tiles</p>"},{"location":"api_reference/core/tiles/#aviary.Tiles.copy","title":"<code>copy</code>","text":"<p>Copies the tiles.</p> RETURNS DESCRIPTION <code>Tiles</code> <p>Tiles</p>"},{"location":"api_reference/core/tiles/#aviary.Tiles.remove","title":"<code>remove</code>","text":"<p>Removes the channels.</p> PARAMETER DESCRIPTION <code>channel_names</code> <p>Channel name, channel names, no channels (False or None), or all channels (True)</p> <p> TYPE: <code>ChannelName | str | ChannelNameSet | bool | None</code> DEFAULT: <code>True</code> </p> <code>inplace</code> <p>If True, the channels are removed inplace</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Tiles</code> <p>Tiles</p>"},{"location":"api_reference/core/tiles/#aviary.Tiles.remove_buffer","title":"<code>remove_buffer</code>","text":"<p>Removes the buffer.</p> PARAMETER DESCRIPTION <code>channel_names</code> <p>Channel name, channel names, no channels (False or None), or all channels (True)</p> <p> TYPE: <code>ChannelName | str | ChannelNameSet | bool | None</code> DEFAULT: <code>True</code> </p> <code>inplace</code> <p>If True, the buffer is removed inplace</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Tiles</code> <p>Tiles</p>"},{"location":"api_reference/core/tiles/#aviary.Tiles.select","title":"<code>select</code>","text":"<p>Selects the channels.</p> PARAMETER DESCRIPTION <code>channel_names</code> <p>Channel name, channel names, no channels (False or None), or all channels (True)</p> <p> TYPE: <code>ChannelName | str | ChannelNameSet | bool | None</code> DEFAULT: <code>True</code> </p> <code>inplace</code> <p>If True, the channels are selected inplace</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Tiles</code> <p>Tiles</p>"},{"location":"api_reference/core/tiles/#aviary.Tiles.to_composite_raster","title":"<code>to_composite_raster</code>","text":"<p>Converts the tiles to composite raster data.</p> PARAMETER DESCRIPTION <code>channel_names</code> <p>Channel name or channel names</p> <p> TYPE: <code>ChannelName | str | list[ChannelName | str]</code> </p> RETURNS DESCRIPTION <code>npt.NDArray</code> <p>Composite raster data</p>"},{"location":"api_reference/core/tiles/#aviary.Tile","title":"<code>Tile = Tiles</code>  <code>module-attribute</code>","text":""},{"location":"api_reference/core/type_aliases/","title":"Type Aliases","text":"<p>View source </p>"},{"location":"api_reference/core/type_aliases/#aviary.BufferSize","title":"<code>BufferSize = int</code>","text":"<p>Buffer size in meters</p>"},{"location":"api_reference/core/type_aliases/#aviary.ChannelNameSet","title":"<code>ChannelNameSet = set[ChannelName | str]</code>","text":"<p>Channel names</p>"},{"location":"api_reference/core/type_aliases/#aviary.Coordinate","title":"<code>Coordinate = int</code>","text":"<p>Coordinate in meters</p>"},{"location":"api_reference/core/type_aliases/#aviary.Coordinates","title":"<code>Coordinates = tuple[Coordinate, Coordinate]</code>","text":"<p>Coordinates (x_min, y_min) of the tile in meters</p>"},{"location":"api_reference/core/type_aliases/#aviary.CoordinatesSet","title":"<code>CoordinatesSet = npt.NDArray[np.int32]</code>","text":"<p>Coordinates (x_min, y_min) of each tile in meters</p>"},{"location":"api_reference/core/type_aliases/#aviary.EPSGCode","title":"<code>EPSGCode = int</code>","text":"<p>EPSG code</p>"},{"location":"api_reference/core/type_aliases/#aviary.FractionalBufferSize","title":"<code>FractionalBufferSize = float</code>","text":"<p>Buffer size as a fraction of the spatial extent of the data</p>"},{"location":"api_reference/core/type_aliases/#aviary.GroundSamplingDistance","title":"<code>GroundSamplingDistance = float</code>","text":"<p>Ground sampling distance in meters</p>"},{"location":"api_reference/core/type_aliases/#aviary.TileSize","title":"<code>TileSize = int</code>","text":"<p>Tile size in meters</p>"},{"location":"api_reference/core/channel/channel/","title":"Channel","text":"<p>View source </p>"},{"location":"api_reference/core/channel/channel/#aviary.Channel","title":"<code>Channel</code>","text":"<p>               Bases: <code>ABC</code>, <code>Iterable[object]</code></p> <p>Abstract class for channels</p> Notes <ul> <li>The <code>data</code> property returns a reference to the data</li> <li>The <code>metadata</code> property returns a reference to the metadata</li> <li>The dunder methods <code>__getitem__</code> and <code>__iter__</code> return or yield a reference to a data item</li> </ul> Implemented channels <ul> <li><code>RasterChannel</code>: Contains batched raster data</li> <li><code>VectorChannel</code>: Contains batched vector data</li> </ul> PARAMETER DESCRIPTION <code>data</code> <p>Data</p> <p> TYPE: <code>object | list[object]</code> </p> <code>name</code> <p>Name</p> <p> TYPE: <code>ChannelName | str</code> </p> <code>buffer_size</code> <p>Buffer size as a fraction of the spatial extent of the data</p> <p> TYPE: <code>FractionalBufferSize</code> DEFAULT: <code>0.0</code> </p> <code>metadata</code> <p>Metadata</p> <p> TYPE: <code>dict[str, object] | None</code> DEFAULT: <code>None</code> </p> <code>copy</code> <p>If True, the data and metadata are copied during initialization</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"api_reference/core/channel/channel/#aviary.Channel.data","title":"<code>data</code>  <code>abstractmethod</code> <code>property</code>","text":"RETURNS DESCRIPTION <code>list[object]</code> <p>Data</p>"},{"location":"api_reference/core/channel/channel/#aviary.Channel.name","title":"<code>name</code>  <code>property</code> <code>writable</code>","text":"RETURNS DESCRIPTION <code>ChannelName | str</code> <p>Name</p>"},{"location":"api_reference/core/channel/channel/#aviary.Channel.buffer_size","title":"<code>buffer_size</code>  <code>property</code>","text":"RETURNS DESCRIPTION <code>FractionalBufferSize</code> <p>Buffer size as a fraction of the spatial extent of the data</p>"},{"location":"api_reference/core/channel/channel/#aviary.Channel.metadata","title":"<code>metadata</code>  <code>property</code> <code>writable</code>","text":"RETURNS DESCRIPTION <code>dict[str, object]</code> <p>Metadata</p>"},{"location":"api_reference/core/channel/channel/#aviary.Channel.is_copied","title":"<code>is_copied</code>  <code>property</code>","text":"RETURNS DESCRIPTION <code>bool</code> <p>If True, the data and metadata are copied during initialization</p>"},{"location":"api_reference/core/channel/channel/#aviary.Channel.batch_size","title":"<code>batch_size</code>  <code>property</code>","text":"RETURNS DESCRIPTION <code>int</code> <p>Batch size</p>"},{"location":"api_reference/core/channel/channel/#aviary.Channel.is_in_tiles","title":"<code>is_in_tiles</code>  <code>property</code>","text":"RETURNS DESCRIPTION <code>bool</code> <p>True if the channel is inside tiles, False otherwise</p>"},{"location":"api_reference/core/channel/channel/#aviary.Channel.from_channels","title":"<code>from_channels</code>  <code>classmethod</code>","text":"<p>Creates a channel from channels.</p> PARAMETER DESCRIPTION <code>channels</code> <p>Channels</p> <p> TYPE: <code>list[Channel]</code> </p> <code>copy</code> <p>If True, the data and metadata are copied during initialization</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Channel</code> <p>Channel</p>"},{"location":"api_reference/core/channel/channel/#aviary.Channel.__eq__","title":"<code>__eq__</code>  <code>abstractmethod</code>","text":"<p>Compares the channels.</p> PARAMETER DESCRIPTION <code>other</code> <p>Other channel</p> <p> TYPE: <code>object</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if the channels are equal, False otherwise</p>"},{"location":"api_reference/core/channel/channel/#aviary.Channel.__len__","title":"<code>__len__</code>","text":"<p>Computes the batch size.</p> RETURNS DESCRIPTION <code>int</code> <p>Batch size</p>"},{"location":"api_reference/core/channel/channel/#aviary.Channel.__getitem__","title":"<code>__getitem__</code>","text":"<p>Returns the data item or the sliced data.</p> PARAMETER DESCRIPTION <code>index</code> <p>Index or slice of the data item</p> <p> TYPE: <code>int | slice</code> </p> RETURNS DESCRIPTION <code>object | list[object]</code> <p>Data item or data</p>"},{"location":"api_reference/core/channel/channel/#aviary.Channel.__iter__","title":"<code>__iter__</code>","text":"<p>Iterates over the data.</p> YIELDS DESCRIPTION <code>object</code> <p>Data item</p>"},{"location":"api_reference/core/channel/channel/#aviary.Channel.__add__","title":"<code>__add__</code>","text":"<p>Adds the channels.</p> PARAMETER DESCRIPTION <code>other</code> <p>Other channel</p> <p> TYPE: <code>Channel</code> </p> RETURNS DESCRIPTION <code>Channel</code> <p>Channel</p>"},{"location":"api_reference/core/channel/channel/#aviary.Channel.append","title":"<code>append</code>","text":"<p>Appends the data.</p> PARAMETER DESCRIPTION <code>data</code> <p>Data</p> <p> TYPE: <code>object | list[object]</code> </p> <code>inplace</code> <p>If True, the data is appended inplace</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Channel</code> <p>Channel</p>"},{"location":"api_reference/core/channel/channel/#aviary.Channel.copy","title":"<code>copy</code>  <code>abstractmethod</code>","text":"<p>Copies the channel.</p> RETURNS DESCRIPTION <code>Channel</code> <p>Channel</p>"},{"location":"api_reference/core/channel/channel/#aviary.Channel.remove_buffer","title":"<code>remove_buffer</code>  <code>abstractmethod</code>","text":"<p>Removes the buffer.</p> PARAMETER DESCRIPTION <code>inplace</code> <p>If True, the buffer is removed inplace</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Channel</code> <p>Channel</p>"},{"location":"api_reference/core/channel/raster_channel/","title":"RasterChannel","text":"<p>View source </p>"},{"location":"api_reference/core/channel/raster_channel/#aviary.RasterChannel","title":"<code>RasterChannel</code>","text":"<p>               Bases: <code>Channel</code>, <code>Iterable[npt.NDArray]</code></p> <p>Channel that contains batched raster data</p> Notes <ul> <li>The data items are assumed to be in shape (n, n), where n is the spatial extent in x and y direction</li> <li>The <code>data</code> property returns a reference to the data</li> <li>The dunder methods <code>__getitem__</code> and <code>__iter__</code> return or yield a reference to a data item</li> </ul> PARAMETER DESCRIPTION <code>data</code> <p>Data</p> <p> TYPE: <code>npt.NDArray | list[npt.NDArray]</code> </p> <code>name</code> <p>Name</p> <p> TYPE: <code>ChannelName | str</code> </p> <code>buffer_size</code> <p>Buffer size as a fraction of the spatial extent of the data</p> <p> TYPE: <code>FractionalBufferSize</code> DEFAULT: <code>0.0</code> </p> <code>metadata</code> <p>Metadata</p> <p> TYPE: <code>dict[str, object] | None</code> DEFAULT: <code>None</code> </p> <code>copy</code> <p>If True, the data and metadata are copied during initialization</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"api_reference/core/channel/raster_channel/#aviary.RasterChannel.name","title":"<code>name</code>  <code>property</code> <code>writable</code>","text":"RETURNS DESCRIPTION <code>ChannelName | str</code> <p>Name</p>"},{"location":"api_reference/core/channel/raster_channel/#aviary.RasterChannel.buffer_size","title":"<code>buffer_size</code>  <code>property</code>","text":"RETURNS DESCRIPTION <code>FractionalBufferSize</code> <p>Buffer size as a fraction of the spatial extent of the data</p>"},{"location":"api_reference/core/channel/raster_channel/#aviary.RasterChannel.metadata","title":"<code>metadata</code>  <code>property</code> <code>writable</code>","text":"RETURNS DESCRIPTION <code>dict[str, object]</code> <p>Metadata</p>"},{"location":"api_reference/core/channel/raster_channel/#aviary.RasterChannel.is_copied","title":"<code>is_copied</code>  <code>property</code>","text":"RETURNS DESCRIPTION <code>bool</code> <p>If True, the data and metadata are copied during initialization</p>"},{"location":"api_reference/core/channel/raster_channel/#aviary.RasterChannel.batch_size","title":"<code>batch_size</code>  <code>property</code>","text":"RETURNS DESCRIPTION <code>int</code> <p>Batch size</p>"},{"location":"api_reference/core/channel/raster_channel/#aviary.RasterChannel.is_in_tiles","title":"<code>is_in_tiles</code>  <code>property</code>","text":"RETURNS DESCRIPTION <code>bool</code> <p>True if the channel is inside tiles, False otherwise</p>"},{"location":"api_reference/core/channel/raster_channel/#aviary.RasterChannel.data","title":"<code>data</code>  <code>property</code>","text":"RETURNS DESCRIPTION <code>list[npt.NDArray]</code> <p>Data</p>"},{"location":"api_reference/core/channel/raster_channel/#aviary.RasterChannel.__len__","title":"<code>__len__</code>","text":"<p>Computes the batch size.</p> RETURNS DESCRIPTION <code>int</code> <p>Batch size</p>"},{"location":"api_reference/core/channel/raster_channel/#aviary.RasterChannel.from_channels","title":"<code>from_channels</code>  <code>classmethod</code>","text":"<p>Creates a raster channel from raster channels.</p> PARAMETER DESCRIPTION <code>channels</code> <p>Raster channels</p> <p> TYPE: <code>list[RasterChannel]</code> </p> <code>copy</code> <p>If True, the data and metadata are copied during initialization</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>RasterChannel</code> <p>Raster channel</p>"},{"location":"api_reference/core/channel/raster_channel/#aviary.RasterChannel.__eq__","title":"<code>__eq__</code>","text":"<p>Compares the raster channels.</p> PARAMETER DESCRIPTION <code>other</code> <p>Other raster channel</p> <p> TYPE: <code>object</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if the raster channels are equal, False otherwise</p>"},{"location":"api_reference/core/channel/raster_channel/#aviary.RasterChannel.__getitem__","title":"<code>__getitem__</code>","text":"<p>Returns the data item.</p> PARAMETER DESCRIPTION <code>index</code> <p>Index or slice of the data item</p> <p> TYPE: <code>int | slice</code> </p> RETURNS DESCRIPTION <code>npt.NDArray | list[npt.NDArray]</code> <p>Data item or sliced data</p>"},{"location":"api_reference/core/channel/raster_channel/#aviary.RasterChannel.__iter__","title":"<code>__iter__</code>","text":"<p>Iterates over the data.</p> YIELDS DESCRIPTION <code>npt.NDArray</code> <p>Data item</p>"},{"location":"api_reference/core/channel/raster_channel/#aviary.RasterChannel.__add__","title":"<code>__add__</code>","text":"<p>Adds the raster channels.</p> PARAMETER DESCRIPTION <code>other</code> <p>Other raster channel</p> <p> TYPE: <code>RasterChannel</code> </p> RETURNS DESCRIPTION <code>RasterChannel</code> <p>Raster channel</p>"},{"location":"api_reference/core/channel/raster_channel/#aviary.RasterChannel.append","title":"<code>append</code>","text":"<p>Appends the data.</p> PARAMETER DESCRIPTION <code>data</code> <p>Data</p> <p> TYPE: <code>npt.NDArray | list[npt.NDArray]</code> </p> <code>inplace</code> <p>If True, the data is appended inplace</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>RasterChannel</code> <p>Raster channel</p>"},{"location":"api_reference/core/channel/raster_channel/#aviary.RasterChannel.copy","title":"<code>copy</code>","text":"<p>Copies the raster channel.</p> RETURNS DESCRIPTION <code>RasterChannel</code> <p>Raster channel</p>"},{"location":"api_reference/core/channel/raster_channel/#aviary.RasterChannel.remove_buffer","title":"<code>remove_buffer</code>","text":"<p>Removes the buffer.</p> PARAMETER DESCRIPTION <code>inplace</code> <p>If True, the buffer is removed inplace</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>RasterChannel</code> <p>Raster channel</p>"},{"location":"api_reference/core/channel/vector_channel/","title":"VectorChannel","text":"<p>View source </p>"},{"location":"api_reference/core/channel/vector_channel/#aviary.VectorChannel","title":"<code>VectorChannel</code>","text":"<p>               Bases: <code>Channel</code>, <code>Iterable[gpd.GeoDataFrame]</code></p> <p>Channel that contains batched vector data</p> Notes <ul> <li>The data items are assumed to be normalized to the spatial extent [0, 1] in x and y direction     without a coordinate reference system</li> <li>The <code>data</code> property returns a reference to the data</li> <li>The dunder methods <code>__getitem__</code> and <code>__iter__</code> return or yield a reference to a data item</li> </ul> PARAMETER DESCRIPTION <code>data</code> <p>Data</p> <p> TYPE: <code>gpd.GeoDataFrame | list[gpd.GeoDataFrame]</code> </p> <code>name</code> <p>Name</p> <p> TYPE: <code>ChannelName | str</code> </p> <code>buffer_size</code> <p>Buffer size as a fraction of the spatial extent of the data</p> <p> TYPE: <code>FractionalBufferSize</code> DEFAULT: <code>0.0</code> </p> <code>metadata</code> <p>Metadata</p> <p> TYPE: <code>dict[str, object] | None</code> DEFAULT: <code>None</code> </p> <code>copy</code> <p>If True, the data and metadata are copied during initialization</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"api_reference/core/channel/vector_channel/#aviary.VectorChannel.name","title":"<code>name</code>  <code>property</code> <code>writable</code>","text":"RETURNS DESCRIPTION <code>ChannelName | str</code> <p>Name</p>"},{"location":"api_reference/core/channel/vector_channel/#aviary.VectorChannel.buffer_size","title":"<code>buffer_size</code>  <code>property</code>","text":"RETURNS DESCRIPTION <code>FractionalBufferSize</code> <p>Buffer size as a fraction of the spatial extent of the data</p>"},{"location":"api_reference/core/channel/vector_channel/#aviary.VectorChannel.metadata","title":"<code>metadata</code>  <code>property</code> <code>writable</code>","text":"RETURNS DESCRIPTION <code>dict[str, object]</code> <p>Metadata</p>"},{"location":"api_reference/core/channel/vector_channel/#aviary.VectorChannel.is_copied","title":"<code>is_copied</code>  <code>property</code>","text":"RETURNS DESCRIPTION <code>bool</code> <p>If True, the data and metadata are copied during initialization</p>"},{"location":"api_reference/core/channel/vector_channel/#aviary.VectorChannel.batch_size","title":"<code>batch_size</code>  <code>property</code>","text":"RETURNS DESCRIPTION <code>int</code> <p>Batch size</p>"},{"location":"api_reference/core/channel/vector_channel/#aviary.VectorChannel.is_in_tiles","title":"<code>is_in_tiles</code>  <code>property</code>","text":"RETURNS DESCRIPTION <code>bool</code> <p>True if the channel is inside tiles, False otherwise</p>"},{"location":"api_reference/core/channel/vector_channel/#aviary.VectorChannel.data","title":"<code>data</code>  <code>property</code>","text":"RETURNS DESCRIPTION <code>list[gpd.GeoDataFrame]</code> <p>Data</p>"},{"location":"api_reference/core/channel/vector_channel/#aviary.VectorChannel.__len__","title":"<code>__len__</code>","text":"<p>Computes the batch size.</p> RETURNS DESCRIPTION <code>int</code> <p>Batch size</p>"},{"location":"api_reference/core/channel/vector_channel/#aviary.VectorChannel.from_channels","title":"<code>from_channels</code>  <code>classmethod</code>","text":"<p>Creates a vector channel from vector channels.</p> PARAMETER DESCRIPTION <code>channels</code> <p>Vector channels</p> <p> TYPE: <code>list[VectorChannel]</code> </p> <code>copy</code> <p>If True, the data and metadata are copied during initialization</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>VectorChannel</code> <p>Vector channel</p>"},{"location":"api_reference/core/channel/vector_channel/#aviary.VectorChannel.from_unnormalized_data","title":"<code>from_unnormalized_data</code>  <code>classmethod</code>","text":"<p>Creates a vector channel from unnormalized data.</p> PARAMETER DESCRIPTION <code>data</code> <p>Data</p> <p> TYPE: <code>gpd.GeoDataFrame | list[gpd.GeoDataFrame]</code> </p> <code>name</code> <p>Name</p> <p> TYPE: <code>ChannelName | str</code> </p> <code>coordinates</code> <p>Coordinates (x_min, y_min) of the tile or of each tile in meters</p> <p> TYPE: <code>Coordinates | CoordinatesSet</code> </p> <code>tile_size</code> <p>Tile size in meters</p> <p> TYPE: <code>TileSize</code> </p> <code>buffer_size</code> <p>Buffer size in meters</p> <p> TYPE: <code>BufferSize</code> DEFAULT: <code>0</code> </p> <code>metadata</code> <p>Metadata</p> <p> TYPE: <code>dict[str, object] | None</code> DEFAULT: <code>None</code> </p> <code>copy</code> <p>If True, the data and metadata are copied during initialization</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"api_reference/core/channel/vector_channel/#aviary.VectorChannel.__eq__","title":"<code>__eq__</code>","text":"<p>Compares the vector channels.</p> PARAMETER DESCRIPTION <code>other</code> <p>Other vector channel</p> <p> TYPE: <code>object</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if the vector channels are equal, False otherwise</p>"},{"location":"api_reference/core/channel/vector_channel/#aviary.VectorChannel.__getitem__","title":"<code>__getitem__</code>","text":"<p>Returns the data item.</p> PARAMETER DESCRIPTION <code>index</code> <p>Index or slice of the data item</p> <p> TYPE: <code>int | slice</code> </p> RETURNS DESCRIPTION <code>gpd.GeoDataFrame | list[gpd.GeoDataFrame]</code> <p>Data item or sliced data</p>"},{"location":"api_reference/core/channel/vector_channel/#aviary.VectorChannel.__iter__","title":"<code>__iter__</code>","text":"<p>Iterates over the data.</p> YIELDS DESCRIPTION <code>gpd.GeoDataFrame</code> <p>Data item</p>"},{"location":"api_reference/core/channel/vector_channel/#aviary.VectorChannel.__add__","title":"<code>__add__</code>","text":"<p>Adds the vector channels.</p> PARAMETER DESCRIPTION <code>other</code> <p>Other vector channel</p> <p> TYPE: <code>VectorChannel</code> </p> RETURNS DESCRIPTION <code>VectorChannel</code> <p>Vector channel</p>"},{"location":"api_reference/core/channel/vector_channel/#aviary.VectorChannel.append","title":"<code>append</code>","text":"<p>Appends the data.</p> PARAMETER DESCRIPTION <code>data</code> <p>Data</p> <p> TYPE: <code>gpd.GeoDataFrame | list[gpd.GeoDataFrame]</code> </p> <code>inplace</code> <p>If True, the data is appended inplace</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>VectorChannel</code> <p>Vector channel</p>"},{"location":"api_reference/core/channel/vector_channel/#aviary.VectorChannel.copy","title":"<code>copy</code>","text":"<p>Copies the vector channel.</p> RETURNS DESCRIPTION <code>VectorChannel</code> <p>Vector channel</p>"},{"location":"api_reference/core/channel/vector_channel/#aviary.VectorChannel.remove_buffer","title":"<code>remove_buffer</code>","text":"<p>Removes the buffer.</p> PARAMETER DESCRIPTION <code>inplace</code> <p>If True, the buffer is removed inplace</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>VectorChannel</code> <p>Vector channel</p>"},{"location":"api_reference/core/channel/vector_channel/#aviary.VectorChannel.to_denormalized_data","title":"<code>to_denormalized_data</code>","text":"<p>Converts the data to denormalized data.</p> PARAMETER DESCRIPTION <code>coordinates</code> <p>Coordinates (x_min, y_min) of each tile in meters</p> <p> TYPE: <code>CoordinatesSet</code> </p> <code>tile_size</code> <p>Tile size in meters</p> <p> TYPE: <code>TileSize</code> </p> RETURNS DESCRIPTION <code>list[gpd.GeoDataFrame]</code> <p>Data</p>"},{"location":"api_reference/pipeline/tile_pipeline/","title":"TilePipeline","text":"<p>View source </p>"},{"location":"api_reference/pipeline/tile_pipeline/#aviary.pipeline.TilePipeline","title":"<code>TilePipeline</code>","text":"<p>Pre-built tile pipeline</p> PARAMETER DESCRIPTION <code>grid</code> <p>Grid</p> <p> TYPE: <code>Grid</code> </p> <code>tile_fetcher</code> <p>Tile fetcher</p> <p> TYPE: <code>TileFetcher</code> </p> <code>tiles_processor</code> <p>Tiles processor</p> <p> TYPE: <code>TilesProcessor</code> </p> <code>tile_loader_batch_size</code> <p>Batch size</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>tile_loader_max_num_threads</code> <p>Maximum number of threads</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>tile_loader_num_prefetched_tiles</code> <p>Number of prefetched tiles</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p>"},{"location":"api_reference/pipeline/tile_pipeline/#aviary.pipeline.TilePipeline.from_config","title":"<code>from_config</code>  <code>classmethod</code>","text":"<p>Creates a tile pipeline from the configuration.</p> PARAMETER DESCRIPTION <code>config</code> <p>Configuration</p> <p> TYPE: <code>TilePipelineConfig</code> </p> RETURNS DESCRIPTION <code>TilePipeline</code> <p>Tile pipeline</p>"},{"location":"api_reference/pipeline/tile_pipeline/#aviary.pipeline.TilePipeline.__call__","title":"<code>__call__</code>","text":"<p>Runs the tile pipeline.</p>"},{"location":"api_reference/pipeline/tile_pipeline/#aviary.pipeline.TilePipelineConfig","title":"<code>TilePipelineConfig</code>","text":"<p>               Bases: <code>pydantic.BaseModel</code></p> <p>Configuration for the <code>from_config</code> class method of <code>TilePipeline</code></p> Create the configuration from a config file <ul> <li>Use null instead of None</li> </ul> Example <p>You can create the configuration from a config file.</p> config.yaml<pre><code>plugins_dir_path: null\n\ngrid_config:\n  ...\n\ntile_fetcher_config:\n  ...\n\ntile_loader_config:\n  batch_size: 1\n  max_num_threads: null\n  num_prefetched_tiles: 0\n\ntiles_processor_config:\n  ...\n</code></pre> ATTRIBUTE DESCRIPTION <code>plugins_dir_path</code> <p>Path to the plugins directory - defaults to None</p> <p> TYPE: <code>Path | None</code> </p> <code>grid_config</code> <p>Configuration for the grid</p> <p> TYPE: <code>GridConfig</code> </p> <code>tile_fetcher_config</code> <p>Configuration for the tile fetcher</p> <p> TYPE: <code>TileFetcherConfig</code> </p> <code>tile_loader_config</code> <p>Configuration for the tile loader - defaults to <code>TileLoaderConfig</code></p> <p> TYPE: <code>TileLoaderConfig</code> </p> <code>tiles_processor_config</code> <p>Configuration for the tiles processor</p> <p> TYPE: <code>TilesProcessorConfig</code> </p>"},{"location":"api_reference/pipeline/tile_pipeline/#aviary.pipeline.TileLoaderConfig","title":"<code>TileLoaderConfig</code>","text":"<p>               Bases: <code>pydantic.BaseModel</code></p> <p>Configuration for the tile loader in the tile pipeline</p> Create the configuration from a config file <ul> <li>Use null instead of None</li> </ul> Example <p>You can create the configuration from a config file.</p> config.yaml<pre><code>batch_size: 1\nmax_num_threads: null\nnum_prefetched_tiles: 0\n</code></pre> ATTRIBUTE DESCRIPTION <code>batch_size</code> <p>Batch size - defaults to 1</p> <p> TYPE: <code>int</code> </p> <code>max_num_threads</code> <p>Maximum number of threads - defaults to None</p> <p> TYPE: <code>int | None</code> </p> <code>num_prefetched_tiles</code> <p>Number of prefetched tiles - defaults to 0</p> <p> TYPE: <code>int</code> </p>"},{"location":"api_reference/tile/tile_loader/","title":"TileLoader","text":"<p>View source </p>"},{"location":"api_reference/tile/tile_loader/#aviary.tile.TileLoader","title":"<code>TileLoader</code>","text":"<p>               Bases: <code>Iterable[Tiles]</code></p> <p>A tile loader is an iterable that yields tiles from the tile set.</p> Example <p>Assume the tile set is already created.</p> <p>You can create a tile loader and iterate over the tiles.</p> <pre><code>tile_loader = TileLoader(\n    tile_set=tile_set,\n    batch_size=1,\n    max_num_threads=None,\n    num_prefetched_tiles=0,\n)\n\nfor tiles in tile_loader:\n    ...\n</code></pre> PARAMETER DESCRIPTION <code>tile_set</code> <p>Tile set</p> <p> TYPE: <code>TileSet</code> </p> <code>batch_size</code> <p>Batch size</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>max_num_threads</code> <p>Maximum number of threads</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>num_prefetched_tiles</code> <p>Number of prefetched tiles</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p>"},{"location":"api_reference/tile/tile_loader/#aviary.tile.TileLoader.__len__","title":"<code>__len__</code>","text":"<p>Computes the number of tiles.</p> RETURNS DESCRIPTION <code>int</code> <p>Number of tiles</p>"},{"location":"api_reference/tile/tile_loader/#aviary.tile.TileLoader.__iter__","title":"<code>__iter__</code>","text":"<p>Iterates over the tiles.</p> YIELDS DESCRIPTION <code>Tiles</code> <p>Tiles</p>"},{"location":"api_reference/tile/tile_loader/#aviary.tile.TileLoader.__next__","title":"<code>__next__</code>","text":"<p>Returns the next tiles.</p> RETURNS DESCRIPTION <code>Tiles</code> <p>Tiles</p>"},{"location":"api_reference/tile/tile_set/","title":"TileSet","text":"<p>View source </p>"},{"location":"api_reference/tile/tile_set/#aviary.tile.TileSet","title":"<code>TileSet</code>","text":"<p>               Bases: <code>Iterable[Tile]</code></p> <p>A tile set is an iterable that yields a tile for each coordinates in the grid by calling the tile fetcher.</p> Example <p>Assume the grid and the tile fetcher are already created.</p> <p>You can create a tile set and iterate over the tiles.</p> <pre><code>tile_set = TileSet(\n    grid=grid,\n    tile_fetcher=tile_fetcher,\n)\n\nfor tile in tile_set:\n    ...\n</code></pre> PARAMETER DESCRIPTION <code>grid</code> <p>Grid</p> <p> TYPE: <code>Grid</code> </p> <code>tile_fetcher</code> <p>Tile fetcher</p> <p> TYPE: <code>TileFetcher</code> </p>"},{"location":"api_reference/tile/tile_set/#aviary.tile.TileSet.__len__","title":"<code>__len__</code>","text":"<p>Computes the number of tiles.</p> RETURNS DESCRIPTION <code>int</code> <p>Number of tiles</p>"},{"location":"api_reference/tile/tile_set/#aviary.tile.TileSet.__getitem__","title":"<code>__getitem__</code>","text":"<p>Returns the tile.</p> PARAMETER DESCRIPTION <code>index</code> <p>Index of the tile</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>Tile</code> <p>Tile</p>"},{"location":"api_reference/tile/tile_set/#aviary.tile.TileSet.__iter__","title":"<code>__iter__</code>","text":"<p>Iterates over the tiles.</p> YIELDS DESCRIPTION <code>Tile</code> <p>Tile</p>"},{"location":"api_reference/tile/model/adois/","title":"Adois","text":"<p>View source </p>"},{"location":"api_reference/tile/model/adois/#aviary.tile.Adois","title":"<code>Adois</code>","text":"<p>Tiles processor that uses the adois model to detect and classify impervious surfaces.</p> <p>adois is a segmentation model that is trained to detect and classify impervious surfaces from digital orthophotos. It differentiates between non-impervious surfaces (e.g., vegetation, soil or water), buildings and impervious surfaces (e.g., pavements, roads, sidewalks, driveways, parking lots or industrial areas). It is recommended to use the model with leaf-off orthophotos (i.e., without foliage on trees or shrubs), so canopies do not cover buildings or impervious surfaces.</p> Model input channels <ul> <li><code>ChannelName.R</code>: Red channel, raster channel, ground sampling distance of 0.2 meters,     normalized values in range [0, 1]</li> <li><code>ChannelName.G</code>: Green channel, raster channel, ground sampling distance of 0.2 meters,     normalized values in range [0, 1]</li> <li><code>ChannelName.B</code>: Blue channel, raster channel, ground sampling distance of 0.2 meters,     normalized values in range [0, 1]</li> <li><code>ChannelName.NIR</code>: Near-infrared channel, raster channel, ground sampling distance of 0.2 meters,     normalized values in range [0, 1]</li> </ul> Model output channels <ul> <li>'adois': Impervious surfaces channel, raster channel, ground sampling distance of 0.2 meters,     the classes are non-impervious surfaces (value 0), buildings (value 1), and impervious surfaces (value 2)</li> </ul> Additional dependencies <p>adois requires <code>huggingface_hub</code> and <code>onnxruntime</code> as additional dependencies.</p> <p>Implements the <code>TilesProcessor</code> protocol.</p> PARAMETER DESCRIPTION <code>r_channel_name</code> <p>Channel name of the red channel</p> <p> TYPE: <code>ChannelName | str</code> DEFAULT: <code>ChannelName.R</code> </p> <code>g_channel_name</code> <p>Channel name of the green channel</p> <p> TYPE: <code>ChannelName | str</code> DEFAULT: <code>ChannelName.G</code> </p> <code>b_channel_name</code> <p>Channel name of the blue channel</p> <p> TYPE: <code>ChannelName | str</code> DEFAULT: <code>ChannelName.B</code> </p> <code>nir_channel_name</code> <p>Channel name of the near-infrared channel</p> <p> TYPE: <code>ChannelName | str</code> DEFAULT: <code>ChannelName.NIR</code> </p> <code>out_channel_name</code> <p>Channel name of the output channel</p> <p> TYPE: <code>ChannelName | str</code> DEFAULT: <code>'adois'</code> </p> <code>cache_dir_path</code> <p>Path to the cache directory of the model</p> <p> TYPE: <code>Path</code> DEFAULT: <code>Path('cache')</code> </p> <code>remove_channels</code> <p>If True, the channels are removed</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"api_reference/tile/model/adois/#aviary.tile.Adois.from_config","title":"<code>from_config</code>  <code>classmethod</code>","text":"<p>Creates the adois model from the configuration.</p> PARAMETER DESCRIPTION <code>config</code> <p>Configuration</p> <p> TYPE: <code>AdoisConfig</code> </p> RETURNS DESCRIPTION <code>Adois</code> <p>Adois</p>"},{"location":"api_reference/tile/model/adois/#aviary.tile.Adois.__call__","title":"<code>__call__</code>","text":"<p>Runs the adois model.</p> PARAMETER DESCRIPTION <code>tiles</code> <p>Tiles</p> <p> TYPE: <code>Tiles</code> </p> RETURNS DESCRIPTION <code>Tiles</code> <p>Tiles</p>"},{"location":"api_reference/tile/model/adois/#aviary.tile.AdoisConfig","title":"<code>AdoisConfig</code>","text":"<p>               Bases: <code>pydantic.BaseModel</code></p> <p>Configuration for the <code>from_config</code> class method of <code>Adois</code></p> Create the configuration from a config file <ul> <li>Use null instead of None</li> <li>Use false or true instead of False or True</li> </ul> Example <p>You can create the configuration from a config file.</p> config.yaml<pre><code>package: 'aviary'\nname: 'Adois'\nconfig:\n  r_channel_name: 'r'\n  g_channel_name: 'g'\n  b_channel_name: 'b'\n  nir_channel_name: 'nir'\n  out_channel_name: 'adois'\n  cache_dir_path: 'cache'\n  remove_channels: true\n</code></pre> ATTRIBUTE DESCRIPTION <code>r_channel_name</code> <p>Channel name of the red channel - defaults to <code>ChannelName.R</code></p> <p> TYPE: <code>ChannelName | str</code> </p> <code>g_channel_name</code> <p>Channel name of the green channel - defaults to <code>ChannelName.G</code></p> <p> TYPE: <code>ChannelName | str</code> </p> <code>b_channel_name</code> <p>Channel name of the blue channel - defaults to <code>ChannelName.B</code></p> <p> TYPE: <code>ChannelName | str</code> </p> <code>nir_channel_name</code> <p>Channel name of the near-infrared channel - defaults to <code>ChannelName.NIR</code></p> <p> TYPE: <code>ChannelName | str</code> </p> <code>out_channel_name</code> <p>Channel name of the output channel - defaults to 'adois'</p> <p> TYPE: <code>ChannelName | str</code> </p> <code>cache_dir_path</code> <p>Path to the cache directory of the model - defaults to 'cache'</p> <p> TYPE: <code>Path</code> </p> <code>remove_channels</code> <p>If True, the channels are removed - defaults to True</p> <p> TYPE: <code>bool</code> </p>"},{"location":"api_reference/tile/tile_fetcher/composite_fetcher/","title":"CompositeFetcher","text":"<p>View source </p>"},{"location":"api_reference/tile/tile_fetcher/composite_fetcher/#aviary.tile.CompositeFetcher","title":"<code>CompositeFetcher</code>","text":"<p>Tile fetcher that composes multiple tile fetchers</p> Notes <ul> <li>The tile fetchers are called concurrently depending on the maximum number of threads</li> <li>If the maximum number of threads is 1, the tile fetchers are composed vertically, i.e., in sequence</li> <li>If the maximum number of threads is greater than 1, the tile fetchers are composed horizontally, i.e.,     in parallel</li> </ul> <p>Implements the <code>TileFetcher</code> protocol.</p> PARAMETER DESCRIPTION <code>tile_fetchers</code> <p>Tile fetchers</p> <p> TYPE: <code>list[TileFetcher]</code> </p> <code>max_num_threads</code> <p>Maximum number of threads</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api_reference/tile/tile_fetcher/composite_fetcher/#aviary.tile.CompositeFetcher.from_config","title":"<code>from_config</code>  <code>classmethod</code>","text":"<p>Creates a composite fetcher from the configuration.</p> PARAMETER DESCRIPTION <code>config</code> <p>Configuration</p> <p> TYPE: <code>CompositeFetcherConfig</code> </p> RETURNS DESCRIPTION <code>CompositeFetcher</code> <p>Composite fetcher</p>"},{"location":"api_reference/tile/tile_fetcher/composite_fetcher/#aviary.tile.CompositeFetcher.__call__","title":"<code>__call__</code>","text":"<p>Fetches a tile from the sources.</p> PARAMETER DESCRIPTION <code>coordinates</code> <p>Coordinates (x_min, y_min) of the tile in meters</p> <p> TYPE: <code>Coordinates</code> </p> RETURNS DESCRIPTION <code>Tile</code> <p>Tile</p>"},{"location":"api_reference/tile/tile_fetcher/composite_fetcher/#aviary.tile.CompositeFetcherConfig","title":"<code>CompositeFetcherConfig</code>","text":"<p>               Bases: <code>pydantic.BaseModel</code></p> <p>Configuration for the <code>from_config</code> class method of <code>CompositeFetcher</code></p> Create the configuration from a config file <ul> <li>Use null instead of None</li> </ul> Example <p>You can create the configuration from a config file.</p> config.yaml<pre><code>package: 'aviary'\nname: 'CompositeFetcher'\nconfig:\n  tile_fetcher_configs:\n    - ...\n    ...\n  max_num_threads: null\n</code></pre> ATTRIBUTE DESCRIPTION <code>tile_fetcher_configs</code> <p>Configurations of the tile fetchers</p> <p> TYPE: <code>list[TileFetcherConfig]</code> </p> <code>max_num_threads</code> <p>Maximum number of threads - defaults to None</p> <p> TYPE: <code>int | None</code> </p>"},{"location":"api_reference/tile/tile_fetcher/tile_fetcher/","title":"TileFetcher","text":"<p>View source </p>"},{"location":"api_reference/tile/tile_fetcher/tile_fetcher/#aviary.tile.TileFetcher","title":"<code>TileFetcher</code>","text":"<p>               Bases: <code>Protocol</code></p> <p>Protocol for tile fetchers</p> <p>Tile fetchers are callables that fetch a tile from a source given a minimum x and y coordinate. These coordinates correspond to the bottom left corner of a tile.</p> Implemented tile fetchers <ul> <li><code>CompositeFetcher</code>: Composes multiple tile fetchers</li> <li><code>VRTFetcher</code>: Fetches a tile from a virtual raster</li> <li><code>WMSFetcher</code>: Fetches a tile from a web map service</li> </ul>"},{"location":"api_reference/tile/tile_fetcher/tile_fetcher/#aviary.tile.TileFetcher.__call__","title":"<code>__call__</code>","text":"<p>Fetches a tile from the source.</p> PARAMETER DESCRIPTION <code>coordinates</code> <p>Coordinates (x_min, y_min) of the tile in meters</p> <p> TYPE: <code>Coordinates</code> </p> RETURNS DESCRIPTION <code>Tile</code> <p>Tile</p>"},{"location":"api_reference/tile/tile_fetcher/tile_fetcher/#aviary.tile.TileFetcherConfig","title":"<code>TileFetcherConfig</code>","text":"<p>               Bases: <code>pydantic.BaseModel</code></p> <p>Configuration for tile fetchers</p> Create the configuration from a config file <ul> <li>Use null instead of None</li> </ul> Example <p>You can create the configuration from a config file.</p> config.yaml<pre><code>package: 'aviary'\nname: 'TileFetcher'\nconfig:\n  ...\n</code></pre> ATTRIBUTE DESCRIPTION <code>package</code> <p>Package - defaults to 'aviary'</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>Name</p> <p> TYPE: <code>str</code> </p> <code>config</code> <p>Configuration - defaults to None</p> <p> TYPE: <code>pydantic.BaseModel | None</code> </p>"},{"location":"api_reference/tile/tile_fetcher/tile_fetcher/#aviary.tile.register_tile_fetcher","title":"<code>register_tile_fetcher</code>","text":"<p>Registers a tile fetcher.</p> PARAMETER DESCRIPTION <code>config_class</code> <p>Configuration class</p> <p> TYPE: <code>type[pydantic.BaseModel]</code> </p> RETURNS DESCRIPTION <code>Callable</code> <p>Decorator</p>"},{"location":"api_reference/tile/tile_fetcher/vrt_fetcher/","title":"VRTFetcher","text":"<p>View source </p>"},{"location":"api_reference/tile/tile_fetcher/vrt_fetcher/#aviary.tile.VRTFetcher","title":"<code>VRTFetcher</code>","text":"<p>Tile fetcher for virtual rasters</p> <p>Implements the <code>TileFetcher</code> protocol.</p> PARAMETER DESCRIPTION <code>path</code> <p>Path to the virtual raster (.vrt file)</p> <p> TYPE: <code>Path</code> </p> <code>epsg_code</code> <p>EPSG code</p> <p> TYPE: <code>EPSGCode</code> </p> <code>channel_names</code> <p>Channel name or channel names (if None, the channel is ignored)</p> <p> TYPE: <code>ChannelName | str | list[ChannelName | str | None] | None</code> </p> <code>tile_size</code> <p>Tile size in meters</p> <p> TYPE: <code>TileSize</code> </p> <code>ground_sampling_distance</code> <p>Ground sampling distance in meters</p> <p> TYPE: <code>GroundSamplingDistance</code> </p> <code>interpolation_mode</code> <p>Interpolation mode (<code>BILINEAR</code> or <code>NEAREST</code>)</p> <p> TYPE: <code>InterpolationMode</code> DEFAULT: <code>InterpolationMode.BILINEAR</code> </p> <code>buffer_size</code> <p>Buffer size in meters</p> <p> TYPE: <code>BufferSize</code> DEFAULT: <code>0</code> </p>"},{"location":"api_reference/tile/tile_fetcher/vrt_fetcher/#aviary.tile.VRTFetcher.from_config","title":"<code>from_config</code>  <code>classmethod</code>","text":"<p>Creates a VRT fetcher from the configuration.</p> PARAMETER DESCRIPTION <code>config</code> <p>Configuration</p> <p> TYPE: <code>VRTFetcherConfig</code> </p> RETURNS DESCRIPTION <code>VRTFetcher</code> <p>VRT fetcher</p>"},{"location":"api_reference/tile/tile_fetcher/vrt_fetcher/#aviary.tile.VRTFetcher.__call__","title":"<code>__call__</code>","text":"<p>Fetches a tile from the virtual raster.</p> PARAMETER DESCRIPTION <code>coordinates</code> <p>Coordinates (x_min, y_min) of the tile in meters</p> <p> TYPE: <code>Coordinates</code> </p> RETURNS DESCRIPTION <code>Tile</code> <p>Tile</p>"},{"location":"api_reference/tile/tile_fetcher/vrt_fetcher/#aviary.tile.VRTFetcherConfig","title":"<code>VRTFetcherConfig</code>","text":"<p>               Bases: <code>pydantic.BaseModel</code></p> <p>Configuration for the <code>from_config</code> class method of <code>VRTFetcher</code></p> Create the configuration from a config file <ul> <li>Use 'bilinear' or 'nearest' instead of <code>InterpolationMode.BILINEAR</code> or <code>InterpolationMode.NEAREST</code></li> <li>Use null instead of None</li> </ul> Example <p>You can create the configuration from a config file.</p> config.yaml<pre><code>package: 'aviary'\nname: 'VRTFetcher'\nconfig:\n  path: 'path/to/my_vrt.vrt'\n  epsg_code: 25832\n  channel_names:\n    - 'r'\n    - 'g'\n    - 'b'\n  tile_size: 128\n  ground_sampling_distance: .2\n  interpolation_mode: 'bilinear'\n  buffer_size: 0\n</code></pre> ATTRIBUTE DESCRIPTION <code>path</code> <p>Path to the virtual raster (.vrt file)</p> <p> TYPE: <code>Path</code> </p> <code>epsg_code</code> <p>EPSG code</p> <p> TYPE: <code>EPSGCode</code> </p> <code>channel_names</code> <p>Channel name or channel names (if None, the channel is ignored)</p> <p> TYPE: <code>ChannelName | str | list[ChannelName | str | None] | None</code> </p> <code>tile_size</code> <p>Tile size in meters</p> <p> TYPE: <code>TileSize</code> </p> <code>ground_sampling_distance</code> <p>Ground sampling distance in meters</p> <p> TYPE: <code>GroundSamplingDistance</code> </p> <code>interpolation_mode</code> <p>Interpolation mode (<code>BILINEAR</code> or <code>NEAREST</code>) - defaults to <code>BILINEAR</code></p> <p> TYPE: <code>InterpolationMode</code> </p> <code>buffer_size</code> <p>Buffer size in meters (specifies the area around the tile that is additionally fetched) - defaults to 0</p> <p> TYPE: <code>BufferSize</code> </p>"},{"location":"api_reference/tile/tile_fetcher/wms_fetcher/","title":"WMSFetcher","text":"<p>View source </p>"},{"location":"api_reference/tile/tile_fetcher/wms_fetcher/#aviary.tile.WMSFetcher","title":"<code>WMSFetcher</code>","text":"<p>Tile fetcher for web map services</p> <p>Implements the <code>TileFetcher</code> protocol.</p> PARAMETER DESCRIPTION <code>url</code> <p>URL of the web map service</p> <p> TYPE: <code>str</code> </p> <code>version</code> <p>Version of the web map service (<code>V1_1_1</code> or <code>V1_3_0</code>)</p> <p> TYPE: <code>WMSVersion</code> </p> <code>layer</code> <p>Layer</p> <p> TYPE: <code>str</code> </p> <code>epsg_code</code> <p>EPSG code</p> <p> TYPE: <code>EPSGCode</code> </p> <code>response_format</code> <p>Format of the response (MIME type, e.g., 'image/png')</p> <p> TYPE: <code>str</code> </p> <code>channel_names</code> <p>Channel name or channel names (if None, the channel is ignored)</p> <p> TYPE: <code>ChannelName | str | list[ChannelName | str | None] | None</code> </p> <code>tile_size</code> <p>Tile size in meters</p> <p> TYPE: <code>TileSize</code> </p> <code>ground_sampling_distance</code> <p>Ground sampling distance in meters</p> <p> TYPE: <code>GroundSamplingDistance</code> </p> <code>style</code> <p>Style</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>buffer_size</code> <p>Buffer size in meters</p> <p> TYPE: <code>BufferSize</code> DEFAULT: <code>0</code> </p>"},{"location":"api_reference/tile/tile_fetcher/wms_fetcher/#aviary.tile.WMSFetcher.from_config","title":"<code>from_config</code>  <code>classmethod</code>","text":"<p>Creates a WMS fetcher from the configuration.</p> PARAMETER DESCRIPTION <code>config</code> <p>Configuration</p> <p> TYPE: <code>WMSFetcherConfig</code> </p> RETURNS DESCRIPTION <code>WMSFetcher</code> <p>WMS fetcher</p>"},{"location":"api_reference/tile/tile_fetcher/wms_fetcher/#aviary.tile.WMSFetcher.__call__","title":"<code>__call__</code>","text":"<p>Fetches a tile from the web map service.</p> PARAMETER DESCRIPTION <code>coordinates</code> <p>Coordinates (x_min, y_min) of the tile in meters</p> <p> TYPE: <code>Coordinates</code> </p> RETURNS DESCRIPTION <code>Tile</code> <p>Tile</p>"},{"location":"api_reference/tile/tile_fetcher/wms_fetcher/#aviary.tile.WMSFetcherConfig","title":"<code>WMSFetcherConfig</code>","text":"<p>               Bases: <code>pydantic.BaseModel</code></p> <p>Configuration for the <code>from_config</code> class method of <code>WMSFetcher</code></p> Create the configuration from a config file <ul> <li>Use '1.1.1' or '1.3.0' instead of <code>WMSVersion.V1_1_1</code> or <code>WMSVersion.V1_3_0</code></li> <li>Use null instead of None</li> </ul> Example <p>You can create the configuration from a config file.</p> config.yaml<pre><code>package: 'aviary'\nname: 'WMSFetcher'\nconfig:\n  url: 'https://www.my-wms.com'\n  version: '1.3.0'\n  layer: 'my_layer'\n  epsg_code: 25832\n  response_format: 'image/png'\n  channel_names:\n    - 'r'\n    - 'g'\n    - 'b'\n  tile_size: 128\n  ground_sampling_distance: .2\n  style: null\n  buffer_size: 0\n</code></pre> ATTRIBUTE DESCRIPTION <code>url</code> <p>URL of the web map service</p> <p> TYPE: <code>str</code> </p> <code>version</code> <p>Version of the web map service (<code>V1_1_1</code> or <code>V1_3_0</code>)</p> <p> TYPE: <code>WMSVersion</code> </p> <code>layer</code> <p>Layer</p> <p> TYPE: <code>str</code> </p> <code>epsg_code</code> <p>EPSG code</p> <p> TYPE: <code>EPSGCode</code> </p> <code>response_format</code> <p>Format of the response (MIME type, e.g., 'image/png')</p> <p> TYPE: <code>str</code> </p> <code>channel_names</code> <p>Channel name or channel names (if None, the channel is ignored)</p> <p> TYPE: <code>ChannelName | str | list[ChannelName | str | None] | None</code> </p> <code>tile_size</code> <p>Tile size in meters</p> <p> TYPE: <code>TileSize</code> </p> <code>ground_sampling_distance</code> <p>Ground sampling distance in meters</p> <p> TYPE: <code>GroundSamplingDistance</code> </p> <code>style</code> <p>Style - defaults to None</p> <p> TYPE: <code>str | None</code> </p> <code>buffer_size</code> <p>Buffer size in meters - defaults to 0</p> <p> TYPE: <code>BufferSize</code> </p>"},{"location":"api_reference/tile/tiles_exporter/grid_exporter/","title":"GridExporter","text":"<p>View source </p>"},{"location":"api_reference/tile/tiles_exporter/grid_exporter/#aviary.tile.GridExporter","title":"<code>GridExporter</code>","text":"<p>Tiles processor that exports the grid of the tiles</p> <p>The grid is exported to a JSON file. The JSON string contains a list of coordinates (x_min, y_min) of each tile and the tile size.</p> <p>Implements the <code>TilesProcessor</code> protocol.</p> PARAMETER DESCRIPTION <code>dir_path</code> <p>Path to the directory</p> <p> TYPE: <code>Path</code> </p> <code>json_name</code> <p>Name of the JSON file (.json file)</p> <p> TYPE: <code>str</code> </p>"},{"location":"api_reference/tile/tiles_exporter/grid_exporter/#aviary.tile.GridExporter.from_config","title":"<code>from_config</code>  <code>classmethod</code>","text":"<p>Creates a grid exporter from the configuration.</p> PARAMETER DESCRIPTION <code>config</code> <p>Configuration</p> <p> TYPE: <code>GridExporterConfig</code> </p> RETURNS DESCRIPTION <code>GridExporter</code> <p>Grid exporter</p>"},{"location":"api_reference/tile/tiles_exporter/grid_exporter/#aviary.tile.GridExporter.__call__","title":"<code>__call__</code>","text":"<p>Exports the grid of the tiles.</p> PARAMETER DESCRIPTION <code>tiles</code> <p>Tiles</p> <p> TYPE: <code>Tiles</code> </p> RETURNS DESCRIPTION <code>Tiles</code> <p>Tiles</p>"},{"location":"api_reference/tile/tiles_exporter/grid_exporter/#aviary.tile.GridExporterConfig","title":"<code>GridExporterConfig</code>","text":"<p>               Bases: <code>pydantic.BaseModel</code></p> <p>Configuration for the <code>from_config</code> class method of <code>GridExporter</code></p> Example <p>You can create the configuration from a config file.</p> config.yaml<pre><code>package: 'aviary'\nname: 'GridExporter'\nconfig:\n  dir_path: 'path/to/my/directory'\n  json_name: 'processed_grid.json'\n</code></pre> ATTRIBUTE DESCRIPTION <code>dir_path</code> <p>Path to the directory</p> <p> TYPE: <code>Path</code> </p> <code>json_name</code> <p>Name of the JSON file (.json file)</p> <p> TYPE: <code>str</code> </p>"},{"location":"api_reference/tile/tiles_exporter/vector_exporter/","title":"VectorExporter","text":"<p>View source </p>"},{"location":"api_reference/tile/tiles_exporter/vector_exporter/#aviary.tile.VectorExporter","title":"<code>VectorExporter</code>","text":"<p>Tiles processor that exports a vector channel</p> <p>The vector data is exported to a geopackage.</p> Notes <ul> <li>Requires a vector channel</li> </ul> <p>Implements the <code>TilesProcessor</code> protocol.</p> PARAMETER DESCRIPTION <code>channel_name</code> <p>Channel name</p> <p> TYPE: <code>ChannelName | str</code> </p> <code>epsg_code</code> <p>EPSG code</p> <p> TYPE: <code>EPSGCode | None</code> </p> <code>dir_path</code> <p>Path to the directory</p> <p> TYPE: <code>Path</code> </p> <code>gpkg_name</code> <p>Name of the geopackage (.gpkg file)</p> <p> TYPE: <code>str</code> </p> <code>remove_channel</code> <p>If True, the channel is removed</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"api_reference/tile/tiles_exporter/vector_exporter/#aviary.tile.VectorExporter.from_config","title":"<code>from_config</code>  <code>classmethod</code>","text":"<p>Creates a vector exporter from the configuration.</p> PARAMETER DESCRIPTION <code>config</code> <p>Configuration</p> <p> TYPE: <code>VectorExporterConfig</code> </p> RETURNS DESCRIPTION <code>VectorExporter</code> <p>Vector exporter</p>"},{"location":"api_reference/tile/tiles_exporter/vector_exporter/#aviary.tile.VectorExporter.__call__","title":"<code>__call__</code>","text":"<p>Exports the vector channel.</p> PARAMETER DESCRIPTION <code>tiles</code> <p>Tiles</p> <p> TYPE: <code>Tiles</code> </p> RETURNS DESCRIPTION <code>Tiles</code> <p>Tiles</p>"},{"location":"api_reference/tile/tiles_exporter/vector_exporter/#aviary.tile.VectorExporterConfig","title":"<code>VectorExporterConfig</code>","text":"<p>               Bases: <code>pydantic.BaseModel</code></p> <p>Configuration for the <code>from_config</code> class method of <code>VectorExporter</code></p> Create the configuration from a config file <ul> <li>Use null instead of None</li> <li>Use false or true instead of False or True</li> </ul> Example <p>You can create the configuration from a config file.</p> config.yaml<pre><code>package: 'aviary'\nname: 'VectorExporter'\nconfig:\n  channel_name: 'my_channel'\n  epsg_code: 25832\n  dir_path: 'path/to/my/directory'\n  gpkg_name: 'my_channel.gpkg'\n  remove_channel: true\n</code></pre> ATTRIBUTE DESCRIPTION <code>channel_name</code> <p>Channel name</p> <p> TYPE: <code>ChannelName | str</code> </p> <code>epsg_code</code> <p>EPSG code</p> <p> TYPE: <code>EPSGCode | None</code> </p> <code>dir_path</code> <p>Path to the directory</p> <p> TYPE: <code>Path</code> </p> <code>gpkg_name</code> <p>Name of the geopackage (.gpkg file)</p> <p> TYPE: <code>str</code> </p> <code>remove_channel</code> <p>If True, the channel is removed - defaults to True</p> <p> TYPE: <code>bool</code> </p>"},{"location":"api_reference/tile/tiles_processor/copy_processor/","title":"CopyProcessor","text":"<p>View source </p>"},{"location":"api_reference/tile/tiles_processor/copy_processor/#aviary.tile.CopyProcessor","title":"<code>CopyProcessor</code>","text":"<p>Tiles processor that copies a channel</p> <p>Implements the <code>TilesProcessor</code> protocol.</p> PARAMETER DESCRIPTION <code>channel_name</code> <p>Channel name</p> <p> TYPE: <code>ChannelName | str</code> </p> <code>new_channel_name</code> <p>New channel name</p> <p> TYPE: <code>ChannelName | str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api_reference/tile/tiles_processor/copy_processor/#aviary.tile.CopyProcessor.from_config","title":"<code>from_config</code>  <code>classmethod</code>","text":"<p>Creates a copy processor from the configuration.</p> PARAMETER DESCRIPTION <code>config</code> <p>Configuration</p> <p> TYPE: <code>CopyProcessorConfig</code> </p> RETURNS DESCRIPTION <code>CopyProcessor</code> <p>Copy processor</p>"},{"location":"api_reference/tile/tiles_processor/copy_processor/#aviary.tile.CopyProcessor.__call__","title":"<code>__call__</code>","text":"<p>Copies the channel.</p> PARAMETER DESCRIPTION <code>tiles</code> <p>Tiles</p> <p> TYPE: <code>Tiles</code> </p> RETURNS DESCRIPTION <code>Tiles</code> <p>Tiles</p>"},{"location":"api_reference/tile/tiles_processor/copy_processor/#aviary.tile.CopyProcessorConfig","title":"<code>CopyProcessorConfig</code>","text":"<p>               Bases: <code>pydantic.BaseModel</code></p> <p>Configuration for the <code>from_config</code> class method of <code>CopyProcessor</code></p> Create the configuration from a config file <ul> <li>Use null instead of None</li> </ul> Example <p>You can create the configuration from a config file.</p> config.yaml<pre><code>package: 'aviary'\nname: 'CopyProcessor'\nconfig:\n  channel_name: 'my_channel'\n  new_channel_name: 'my_new_channel'\n</code></pre> ATTRIBUTE DESCRIPTION <code>channel_name</code> <p>Channel name</p> <p> TYPE: <code>ChannelName | str</code> </p> <code>new_channel_name</code> <p>New channel name - defaults to None</p> <p> TYPE: <code>ChannelName | str | None</code> </p>"},{"location":"api_reference/tile/tiles_processor/normalize_processor/","title":"NormalizeProcessor","text":"<p>View source </p>"},{"location":"api_reference/tile/tiles_processor/normalize_processor/#aviary.tile.NormalizeProcessor","title":"<code>NormalizeProcessor</code>","text":"<p>Tiles processor that normalizes a channel</p> Notes <ul> <li>Requires a raster channel</li> </ul> <p>Implements the <code>TilesProcessor</code> protocol.</p> PARAMETER DESCRIPTION <code>channel_name</code> <p>Channel name</p> <p> TYPE: <code>ChannelName | str</code> </p> <code>min_value</code> <p>Minimum value</p> <p> TYPE: <code>float</code> </p> <code>max_value</code> <p>Maximum value</p> <p> TYPE: <code>float</code> </p> <code>new_channel_name</code> <p>New channel name</p> <p> TYPE: <code>ChannelName | str | None</code> DEFAULT: <code>None</code> </p> <code>max_num_threads</code> <p>Maximum number of threads</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api_reference/tile/tiles_processor/normalize_processor/#aviary.tile.NormalizeProcessor.from_config","title":"<code>from_config</code>  <code>classmethod</code>","text":"<p>Creates a normalize processor from the configuration.</p> PARAMETER DESCRIPTION <code>config</code> <p>Configuration</p> <p> TYPE: <code>NormalizeProcessorConfig</code> </p> RETURNS DESCRIPTION <code>NormalizeProcessor</code> <p>Normalize processor</p>"},{"location":"api_reference/tile/tiles_processor/normalize_processor/#aviary.tile.NormalizeProcessor.__call__","title":"<code>__call__</code>","text":"<p>Normalizes the channel.</p> PARAMETER DESCRIPTION <code>tiles</code> <p>Tiles</p> <p> TYPE: <code>Tiles</code> </p> RETURNS DESCRIPTION <code>Tiles</code> <p>Tiles</p>"},{"location":"api_reference/tile/tiles_processor/normalize_processor/#aviary.tile.NormalizeProcessorConfig","title":"<code>NormalizeProcessorConfig</code>","text":"<p>               Bases: <code>pydantic.BaseModel</code></p> <p>Configuration for the <code>from_config</code> class method of <code>NormalizeProcessor</code></p> Create the configuration from a config file <ul> <li>Use null instead of None</li> </ul> Example <p>You can create the configuration from a config file.</p> config.yaml<pre><code>package: 'aviary'\nname: 'NormalizeProcessor'\nconfig:\n  channel_name: 'my_channel'\n  min_value: 0.\n  max_value: 255.\n  new_channel_name: null\n  max_num_threads: null\n</code></pre> ATTRIBUTE DESCRIPTION <code>channel_name</code> <p>Channel name</p> <p> TYPE: <code>ChannelName | str</code> </p> <code>min_value</code> <p>Minimum value</p> <p> TYPE: <code>float</code> </p> <code>max_value</code> <p>Maximum value</p> <p> TYPE: <code>float</code> </p> <code>new_channel_name</code> <p>New channel name - defaults to None</p> <p> TYPE: <code>ChannelName | str | None</code> </p> <code>max_num_threads</code> <p>Maximum number of threads - defaults to None</p> <p> TYPE: <code>int | None</code> </p>"},{"location":"api_reference/tile/tiles_processor/parallel_composite_processor/","title":"ParallelCompositeProcessor","text":"<p>View source </p>"},{"location":"api_reference/tile/tiles_processor/parallel_composite_processor/#aviary.tile.ParallelCompositeProcessor","title":"<code>ParallelCompositeProcessor</code>","text":"<p>Tiles processor that composes multiple tiles processors in parallel</p> Notes <ul> <li>The tiles processors are not called concurrently, but each one gets a copy of the tiles     and the resulting tiles are combined</li> <li>The tiles processors are composed horizontally, i.e., in parallel</li> </ul> <p>Implements the <code>TilesProcessor</code> protocol.</p> PARAMETER DESCRIPTION <code>tiles_processors</code> <p>Tiles processors</p> <p> TYPE: <code>list[TilesProcessor]</code> </p>"},{"location":"api_reference/tile/tiles_processor/parallel_composite_processor/#aviary.tile.ParallelCompositeProcessor.from_config","title":"<code>from_config</code>  <code>classmethod</code>","text":"<p>Creates a parallel composite processor from the configuration.</p> PARAMETER DESCRIPTION <code>config</code> <p>Configuration</p> <p> TYPE: <code>ParallelCompositeProcessorConfig</code> </p> RETURNS DESCRIPTION <code>ParallelCompositeProcessor</code> <p>Parallel composite processor</p>"},{"location":"api_reference/tile/tiles_processor/parallel_composite_processor/#aviary.tile.ParallelCompositeProcessor.__call__","title":"<code>__call__</code>","text":"<p>Processes the tiles with each tiles processor.</p> PARAMETER DESCRIPTION <code>tiles</code> <p>Tiles</p> <p> TYPE: <code>Tiles</code> </p> RETURNS DESCRIPTION <code>Tiles</code> <p>Tiles</p>"},{"location":"api_reference/tile/tiles_processor/parallel_composite_processor/#aviary.tile.ParallelCompositeProcessorConfig","title":"<code>ParallelCompositeProcessorConfig</code>","text":"<p>               Bases: <code>pydantic.BaseModel</code></p> <p>Configuration for the <code>from_config</code> class method of <code>ParallelCompositeProcessor</code></p> Example <p>You can create the configuration from a config file.</p> config.yaml<pre><code>package: 'aviary'\nname: 'ParallelCompositeProcessor'\nconfig:\n  tiles_processor_configs:\n    - ...\n    ...\n</code></pre> ATTRIBUTE DESCRIPTION <code>tiles_processor_configs</code> <p>Configurations of the tiles processors</p> <p> TYPE: <code>list[TilesProcessorConfig]</code> </p>"},{"location":"api_reference/tile/tiles_processor/remove_buffer_processor/","title":"RemoveBufferProcessor","text":"<p>View source </p>"},{"location":"api_reference/tile/tiles_processor/remove_buffer_processor/#aviary.tile.RemoveBufferProcessor","title":"<code>RemoveBufferProcessor</code>","text":"<p>Tiles processor that removes the buffer of channels</p> <p>Implements the <code>TilesProcessor</code> protocol.</p> PARAMETER DESCRIPTION <code>channel_names</code> <p>Channel name, channel names, no channels (False or None), or all channels (True)</p> <p> TYPE: <code>ChannelName | str | ChannelNameSet | bool | None</code> DEFAULT: <code>True</code> </p>"},{"location":"api_reference/tile/tiles_processor/remove_buffer_processor/#aviary.tile.RemoveBufferProcessor.from_config","title":"<code>from_config</code>  <code>classmethod</code>","text":"<p>Creates a remove buffer processor from the configuration.</p> PARAMETER DESCRIPTION <code>config</code> <p>Configuration</p> <p> TYPE: <code>RemoveBufferProcessorConfig</code> </p> RETURNS DESCRIPTION <code>RemoveBufferProcessor</code> <p>Remove buffer processor</p>"},{"location":"api_reference/tile/tiles_processor/remove_buffer_processor/#aviary.tile.RemoveBufferProcessor.__call__","title":"<code>__call__</code>","text":"<p>Removes the buffer of the channels.</p> PARAMETER DESCRIPTION <code>tiles</code> <p>Tiles</p> <p> TYPE: <code>Tiles</code> </p> RETURNS DESCRIPTION <code>Tiles</code> <p>Tiles</p>"},{"location":"api_reference/tile/tiles_processor/remove_buffer_processor/#aviary.tile.RemoveBufferProcessorConfig","title":"<code>RemoveBufferProcessorConfig</code>","text":"<p>               Bases: <code>pydantic.BaseModel</code></p> <p>Configuration for the <code>from_config</code> class method of <code>RemoveBufferProcessor</code></p> Create the configuration from a config file <ul> <li>Use null instead of None</li> <li>Use false or true instead of False or True</li> </ul> Example <p>You can create the configuration from a config file.</p> config.yaml<pre><code>package: 'aviary'\nname: 'RemoveBufferProcessor'\nconfig:\n  channel_names: true\n</code></pre> ATTRIBUTE DESCRIPTION <code>channel_names</code> <p>Channel name, channel names, no channels (False or None), or all channels (True) - defaults to True</p> <p> TYPE: <code>ChannelName | str | ChannelNameSet | bool | None</code> </p>"},{"location":"api_reference/tile/tiles_processor/remove_processor/","title":"RemoveProcessor","text":"<p>View source </p>"},{"location":"api_reference/tile/tiles_processor/remove_processor/#aviary.tile.RemoveProcessor","title":"<code>RemoveProcessor</code>","text":"<p>Tiles processor that removes channels</p> <p>Implements the <code>TilesProcessor</code> protocol.</p> PARAMETER DESCRIPTION <code>channel_names</code> <p>Channel name, channel names, no channels (False or None), or all channels (True)</p> <p> TYPE: <code>ChannelName | str | ChannelNameSet | bool | None</code> DEFAULT: <code>True</code> </p>"},{"location":"api_reference/tile/tiles_processor/remove_processor/#aviary.tile.RemoveProcessor.from_config","title":"<code>from_config</code>  <code>classmethod</code>","text":"<p>Creates a remove processor from the configuration.</p> PARAMETER DESCRIPTION <code>config</code> <p>Configuration</p> <p> TYPE: <code>RemoveProcessorConfig</code> </p> RETURNS DESCRIPTION <code>RemoveProcessor</code> <p>Remove processor</p>"},{"location":"api_reference/tile/tiles_processor/remove_processor/#aviary.tile.RemoveProcessor.__call__","title":"<code>__call__</code>","text":"<p>Removes the channels.</p> PARAMETER DESCRIPTION <code>tiles</code> <p>Tiles</p> <p> TYPE: <code>Tiles</code> </p> RETURNS DESCRIPTION <code>Tiles</code> <p>Tiles</p>"},{"location":"api_reference/tile/tiles_processor/remove_processor/#aviary.tile.RemoveProcessorConfig","title":"<code>RemoveProcessorConfig</code>","text":"<p>               Bases: <code>pydantic.BaseModel</code></p> <p>Configuration for the <code>from_config</code> class method of <code>RemoveProcessor</code></p> Create the configuration from a config file <ul> <li>Use null instead of None</li> <li>Use false or true instead of False or True</li> </ul> Example <p>You can create the configuration from a config file.</p> config.yaml<pre><code>package: 'aviary'\nname: 'RemoveProcessor'\nconfig:\n  channel_names: true\n</code></pre> ATTRIBUTE DESCRIPTION <code>channel_names</code> <p>Channel name, channel names, no channels (False or None), or all channels (True) - defaults to True</p> <p> TYPE: <code>ChannelName | str | ChannelNameSet | bool | None</code> </p>"},{"location":"api_reference/tile/tiles_processor/select_processor/","title":"SelectProcessor","text":"<p>View source </p>"},{"location":"api_reference/tile/tiles_processor/select_processor/#aviary.tile.SelectProcessor","title":"<code>SelectProcessor</code>","text":"<p>Tiles processor that selects channels</p> <p>Implements the <code>TilesProcessor</code> protocol.</p> PARAMETER DESCRIPTION <code>channel_names</code> <p>Channel name, channel names, no channels (False or None), or all channels (True)</p> <p> TYPE: <code>ChannelName | str | ChannelNameSet | bool | None</code> DEFAULT: <code>True</code> </p>"},{"location":"api_reference/tile/tiles_processor/select_processor/#aviary.tile.SelectProcessor.from_config","title":"<code>from_config</code>  <code>classmethod</code>","text":"<p>Creates a select processor from the configuration.</p> PARAMETER DESCRIPTION <code>config</code> <p>Configuration</p> <p> TYPE: <code>SelectProcessorConfig</code> </p> RETURNS DESCRIPTION <code>SelectProcessor</code> <p>Select processor</p>"},{"location":"api_reference/tile/tiles_processor/select_processor/#aviary.tile.SelectProcessor.__call__","title":"<code>__call__</code>","text":"<p>Selects the channels.</p> PARAMETER DESCRIPTION <code>tiles</code> <p>Tiles</p> <p> TYPE: <code>Tiles</code> </p> RETURNS DESCRIPTION <code>Tiles</code> <p>Tiles</p>"},{"location":"api_reference/tile/tiles_processor/select_processor/#aviary.tile.SelectProcessorConfig","title":"<code>SelectProcessorConfig</code>","text":"<p>               Bases: <code>pydantic.BaseModel</code></p> <p>Configuration for the <code>from_config</code> class method of <code>SelectProcessor</code></p> Create the configuration from a config file <ul> <li>Use null instead of None</li> <li>Use false or true instead of False or True</li> </ul> Example <p>You can create the configuration from a config file.</p> config.yaml<pre><code>package: 'aviary'\nname: 'SelectProcessor'\nconfig:\n  channel_names: true\n</code></pre> ATTRIBUTE DESCRIPTION <code>channel_names</code> <p>Channel name, channel names, no channels (False or None), or all channels (True) - defaults to True</p> <p> TYPE: <code>ChannelName | str | ChannelNameSet | bool | None</code> </p>"},{"location":"api_reference/tile/tiles_processor/sequential_composite_processor/","title":"SequentialCompositeProcessor","text":"<p>View source </p>"},{"location":"api_reference/tile/tiles_processor/sequential_composite_processor/#aviary.tile.SequentialCompositeProcessor","title":"<code>SequentialCompositeProcessor</code>","text":"<p>Tiles processor that composes multiple tiles processors in sequence</p> Notes <ul> <li>The tiles processors are composed vertically, i.e., in sequence</li> </ul> <p>Implements the <code>TilesProcessor</code> protocol.</p> PARAMETER DESCRIPTION <code>tiles_processors</code> <p>Tiles processors</p> <p> TYPE: <code>list[TilesProcessor]</code> </p>"},{"location":"api_reference/tile/tiles_processor/sequential_composite_processor/#aviary.tile.SequentialCompositeProcessor.from_config","title":"<code>from_config</code>  <code>classmethod</code>","text":"<p>Creates a sequential composite processor from the configuration.</p> PARAMETER DESCRIPTION <code>config</code> <p>Configuration</p> <p> TYPE: <code>SequentialCompositeProcessorConfig</code> </p> RETURNS DESCRIPTION <code>SequentialCompositeProcessor</code> <p>Sequential composite processor</p>"},{"location":"api_reference/tile/tiles_processor/sequential_composite_processor/#aviary.tile.SequentialCompositeProcessor.__call__","title":"<code>__call__</code>","text":"<p>Processes the tiles with each tiles processor.</p> PARAMETER DESCRIPTION <code>tiles</code> <p>Tiles</p> <p> TYPE: <code>Tiles</code> </p> RETURNS DESCRIPTION <code>Tiles</code> <p>Tiles</p>"},{"location":"api_reference/tile/tiles_processor/sequential_composite_processor/#aviary.tile.SequentialCompositeProcessorConfig","title":"<code>SequentialCompositeProcessorConfig</code>","text":"<p>               Bases: <code>pydantic.BaseModel</code></p> <p>Configuration for the <code>from_config</code> class method of <code>SequentialCompositeProcessor</code></p> Example <p>You can create the configuration from a config file.</p> config.yaml<pre><code>package: 'aviary'\nname: 'SequentialCompositeProcessor'\nconfig:\n  tiles_processor_configs:\n    - ...\n    ...\n</code></pre> ATTRIBUTE DESCRIPTION <code>tiles_processor_configs</code> <p>Configurations of the tiles processors</p> <p> TYPE: <code>list[TilesProcessorConfig]</code> </p>"},{"location":"api_reference/tile/tiles_processor/standardize_processor/","title":"StandardizeProcessor","text":"<p>View source </p>"},{"location":"api_reference/tile/tiles_processor/standardize_processor/#aviary.tile.StandardizeProcessor","title":"<code>StandardizeProcessor</code>","text":"<p>Tiles processor that standardizes a channel</p> Notes <ul> <li>Requires a raster channel</li> </ul> <p>Implements the <code>TilesProcessor</code> protocol.</p> PARAMETER DESCRIPTION <code>channel_name</code> <p>Channel name</p> <p> TYPE: <code>ChannelName | str</code> </p> <code>mean_value</code> <p>Mean value</p> <p> TYPE: <code>float</code> </p> <code>std_value</code> <p>Standard deviation value</p> <p> TYPE: <code>float</code> </p> <code>new_channel_name</code> <p>New channel name</p> <p> TYPE: <code>ChannelName | str | None</code> DEFAULT: <code>None</code> </p> <code>max_num_threads</code> <p>Maximum number of threads</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api_reference/tile/tiles_processor/standardize_processor/#aviary.tile.StandardizeProcessor.from_config","title":"<code>from_config</code>  <code>classmethod</code>","text":"<p>Creates a standardize processor from the configuration.</p> PARAMETER DESCRIPTION <code>config</code> <p>Configuration</p> <p> TYPE: <code>StandardizeProcessorConfig</code> </p> RETURNS DESCRIPTION <code>StandardizeProcessor</code> <p>Standardize processor</p>"},{"location":"api_reference/tile/tiles_processor/standardize_processor/#aviary.tile.StandardizeProcessor.__call__","title":"<code>__call__</code>","text":"<p>Standardizes the channel.</p> PARAMETER DESCRIPTION <code>tiles</code> <p>Tiles</p> <p> TYPE: <code>Tiles</code> </p> RETURNS DESCRIPTION <code>Tiles</code> <p>Tiles</p>"},{"location":"api_reference/tile/tiles_processor/standardize_processor/#aviary.tile.StandardizeProcessorConfig","title":"<code>StandardizeProcessorConfig</code>","text":"<p>               Bases: <code>pydantic.BaseModel</code></p> <p>Configuration for the <code>from_config</code> class method of <code>StandardizeProcessor</code></p> Create the configuration from a config file <ul> <li>Use null instead of None</li> </ul> Example <p>You can create the configuration from a config file.</p> config.yaml<pre><code>package: 'aviary'\nname: 'StandardizeProcessor'\nconfig:\n  channel_name: 'my_channel'\n  mean_value: .5\n  std_value: .25\n  new_channel_name: null\n  max_num_threads: null\n</code></pre> ATTRIBUTE DESCRIPTION <code>channel_name</code> <p>Channel name</p> <p> TYPE: <code>ChannelName | str</code> </p> <code>mean_value</code> <p>Mean value</p> <p> TYPE: <code>float</code> </p> <code>std_value</code> <p>Standard deviation value</p> <p> TYPE: <code>float</code> </p> <code>new_channel_name</code> <p>New channel name - defaults to None</p> <p> TYPE: <code>ChannelName | str | None</code> </p> <code>max_num_threads</code> <p>Maximum number of threads - defaults to None</p> <p> TYPE: <code>int | None</code> </p>"},{"location":"api_reference/tile/tiles_processor/tiles_processor/","title":"TilesProcessor","text":"<p>View source </p>"},{"location":"api_reference/tile/tiles_processor/tiles_processor/#aviary.tile.TilesProcessor","title":"<code>TilesProcessor</code>","text":"<p>               Bases: <code>Protocol</code></p> <p>Protocol for tiles processors</p> <p>Tiles processors are callables that process tiles.</p> Implemented models <ul> <li><code>Adois</code>: Uses the adois model to detect and classify impervious surfaces</li> </ul> Implemented tiles processors <ul> <li><code>CopyProcessor</code>: Copies a channel</li> <li><code>NormalizeProcessor</code>: Normalizes a channel</li> <li><code>ParallelCompositeProcessor</code>: Composes multiple tiles processors in parallel</li> <li><code>RemoveBufferProcessor</code>: Removes the buffer of channels</li> <li><code>RemoveProcessor</code>: Removes channels</li> <li><code>SelectProcessor</code>: Selects channels</li> <li><code>SequentialCompositeProcessor</code>: Composes multiple tiles processors in sequence</li> <li><code>StandardizeProcessor</code>: Standardizes a channel</li> <li><code>VectorizeProcessor</code>: Vectorizes a channel</li> </ul> Implemented exporters <ul> <li><code>GridExporter</code>: Exports the grid of the tiles</li> <li><code>VectorExporter</code>: Exports a vector channel</li> </ul>"},{"location":"api_reference/tile/tiles_processor/tiles_processor/#aviary.tile.TilesProcessor.__call__","title":"<code>__call__</code>","text":"<p>Processes the tiles.</p> PARAMETER DESCRIPTION <code>tiles</code> <p>Tiles</p> <p> TYPE: <code>Tiles</code> </p> RETURNS DESCRIPTION <code>Tiles</code> <p>Tiles</p>"},{"location":"api_reference/tile/tiles_processor/tiles_processor/#aviary.tile.TilesProcessorConfig","title":"<code>TilesProcessorConfig</code>","text":"<p>               Bases: <code>pydantic.BaseModel</code></p> <p>Configuration for tiles processors</p> Create the configuration from a config file <ul> <li>Use null instead of None</li> </ul> Example <p>You can create the configuration from a config file.</p> config.yaml<pre><code>package: 'aviary'\nname: 'TilesProcessor'\nconfig:\n  ...\n</code></pre> ATTRIBUTE DESCRIPTION <code>package</code> <p>Package - defaults to 'aviary'</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>Name</p> <p> TYPE: <code>str</code> </p> <code>config</code> <p>Configuration - defaults to None</p> <p> TYPE: <code>pydantic.BaseModel | None</code> </p>"},{"location":"api_reference/tile/tiles_processor/tiles_processor/#aviary.tile.register_tiles_processor","title":"<code>register_tiles_processor</code>","text":"<p>Registers a tiles processor.</p> PARAMETER DESCRIPTION <code>config_class</code> <p>Configuration class</p> <p> TYPE: <code>type[pydantic.BaseModel]</code> </p> RETURNS DESCRIPTION <code>Callable</code> <p>Decorator</p>"},{"location":"api_reference/tile/tiles_processor/vectorize_processor/","title":"VectorizeProcessor","text":"<p>View source </p>"},{"location":"api_reference/tile/tiles_processor/vectorize_processor/#aviary.tile.VectorizeProcessor","title":"<code>VectorizeProcessor</code>","text":"<p>Tiles processor that vectorizes a channel</p> Notes <ul> <li>Requires a raster channel</li> </ul> <p>Implements the <code>TilesProcessor</code> protocol.</p> PARAMETER DESCRIPTION <code>channel_name</code> <p>Channel name</p> <p> TYPE: <code>ChannelName | str</code> </p> <code>ignore_background_class</code> <p>If True, the background class (value 0) is not vectorized</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>new_channel_name</code> <p>New channel name</p> <p> TYPE: <code>ChannelName | str | None</code> DEFAULT: <code>None</code> </p> <code>max_num_threads</code> <p>Maximum number of threads</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api_reference/tile/tiles_processor/vectorize_processor/#aviary.tile.VectorizeProcessor.from_config","title":"<code>from_config</code>  <code>classmethod</code>","text":"<p>Creates a vectorize processor from the configuration.</p> PARAMETER DESCRIPTION <code>config</code> <p>Configuration</p> <p> TYPE: <code>VectorizeProcessorConfig</code> </p> RETURNS DESCRIPTION <code>VectorizeProcessor</code> <p>Vectorize processor</p>"},{"location":"api_reference/tile/tiles_processor/vectorize_processor/#aviary.tile.VectorizeProcessor.__call__","title":"<code>__call__</code>","text":"<p>Vectorizes the channel.</p> PARAMETER DESCRIPTION <code>tiles</code> <p>Tiles</p> <p> TYPE: <code>Tiles</code> </p> RETURNS DESCRIPTION <code>Tiles</code> <p>Tiles</p>"},{"location":"api_reference/tile/tiles_processor/vectorize_processor/#aviary.tile.VectorizeProcessorConfig","title":"<code>VectorizeProcessorConfig</code>","text":"<p>               Bases: <code>pydantic.BaseModel</code></p> <p>Configuration for the <code>from_config</code> class method of <code>VectorizeProcessor</code></p> Create the configuration from a config file <ul> <li>Use null instead of None</li> <li>Use false or true instead of False or True</li> </ul> Example <p>You can create the configuration from a config file.</p> config.yaml<pre><code>package: 'aviary'\nname: 'VectorizeProcessor'\nconfig:\n  channel_name: 'my_channel'\n  ignore_background_class: true\n  new_channel_name: null\n  max_num_threads: null\n</code></pre> ATTRIBUTE DESCRIPTION <code>channel_name</code> <p>Channel name</p> <p> TYPE: <code>ChannelName | str</code> </p> <code>ignore_background_class</code> <p>If True, the background class (value 0) is not vectorized - defaults to True</p> <p> TYPE: <code>bool</code> </p> <code>new_channel_name</code> <p>New channel name - defaults to None</p> <p> TYPE: <code>ChannelName | str | None</code> </p> <code>max_num_threads</code> <p>Maximum number of threads - defaults to None</p> <p> TYPE: <code>int | None</code> </p>"},{"location":"api_reference/utils/coordinates_filter/composite_filter/","title":"CompositeFilter","text":"<p>View source </p>"},{"location":"api_reference/utils/coordinates_filter/composite_filter/#aviary.utils.CompositeFilter","title":"<code>CompositeFilter</code>","text":"<p>Coordinates filter that composes multiple coordinates filters</p> Notes <ul> <li>The coordinates filters are composed vertically, i.e., in sequence</li> </ul> <p>Implements the <code>CoordinatesFilter</code> protocol.</p> PARAMETER DESCRIPTION <code>coordinates_filters</code> <p>Coordinates filters</p> <p> TYPE: <code>list[CoordinatesFilter]</code> </p>"},{"location":"api_reference/utils/coordinates_filter/composite_filter/#aviary.utils.CompositeFilter.__call__","title":"<code>__call__</code>","text":"<p>Filters the coordinates with each coordinates filter.</p> PARAMETER DESCRIPTION <code>coordinates</code> <p>Coordinates (x_min, y_min) of each tile in meters</p> <p> TYPE: <code>CoordinatesSet</code> </p> RETURNS DESCRIPTION <code>CoordinatesSet</code> <p>Coordinates (x_min, y_min) of each tile in meters</p>"},{"location":"api_reference/utils/coordinates_filter/coordinates_filter/","title":"CoordinatesFilter","text":"<p>View source </p>"},{"location":"api_reference/utils/coordinates_filter/coordinates_filter/#aviary.utils.CoordinatesFilter","title":"<code>CoordinatesFilter</code>","text":"<p>               Bases: <code>Protocol</code></p> <p>Protocol for coordinates filters</p> <p>Coordinates filters are callables that filter coordinates.</p> Implemented coordinates filters <ul> <li><code>CompositeFilter</code>: Composes multiple coordinates filters</li> <li><code>DuplicatesFilter</code>: Removes duplicate coordinates</li> <li><code>GeospatialFilter</code>: Filters based on geospatial data</li> <li><code>MaskFilter</code>: Filters based on a boolean mask</li> <li><code>SetFilter</code>: Filters based on other coordinates</li> </ul>"},{"location":"api_reference/utils/coordinates_filter/coordinates_filter/#aviary.utils.CoordinatesFilter.__call__","title":"<code>__call__</code>","text":"<p>Filters the coordinates.</p> PARAMETER DESCRIPTION <code>coordinates</code> <p>Coordinates (x_min, y_min) of each tile in meters</p> <p> TYPE: <code>CoordinatesSet</code> </p> RETURNS DESCRIPTION <code>CoordinatesSet</code> <p>Coordinates (x_min, y_min) of each tile in meters</p>"},{"location":"api_reference/utils/coordinates_filter/duplicates_filter/","title":"DuplicatesFilter","text":"<p>View source </p>"},{"location":"api_reference/utils/coordinates_filter/duplicates_filter/#aviary.utils.DuplicatesFilter","title":"<code>DuplicatesFilter</code>","text":"<p>Coordinates filter that removes duplicate coordinates</p> <p>Implements the <code>CoordinatesFilter</code> protocol.</p>"},{"location":"api_reference/utils/coordinates_filter/duplicates_filter/#aviary.utils.DuplicatesFilter.__call__","title":"<code>__call__</code>","text":"<p>Filters the coordinates by removing duplicate coordinates.</p> PARAMETER DESCRIPTION <code>coordinates</code> <p>Coordinates (x_min, y_min) of each tile in meters</p> <p> TYPE: <code>CoordinatesSet</code> </p> RETURNS DESCRIPTION <code>CoordinatesSet</code> <p>Coordinates (x_min, y_min) of each tile in meters</p>"},{"location":"api_reference/utils/coordinates_filter/geospatial_filter/","title":"GeospatialFilter","text":"<p>View source </p>"},{"location":"api_reference/utils/coordinates_filter/geospatial_filter/#aviary.utils.GeospatialFilter","title":"<code>GeospatialFilter</code>","text":"<p>Coordinates filter that filters based on geospatial data</p> Available modes <ul> <li><code>DIFFERENCE</code>: Removes coordinates of tiles that are within the polygons in the geodataframe</li> <li><code>INTERSECTION</code>: Removes coordinates of tiles that do not intersect with the polygons in the geodataframe</li> </ul> <p>Implements the <code>CoordinatesFilter</code> protocol.</p> PARAMETER DESCRIPTION <code>tile_size</code> <p>Tile size in meters</p> <p> TYPE: <code>TileSize</code> </p> <code>gdf</code> <p>Geodataframe</p> <p> TYPE: <code>gpd.GeoDataFrame</code> </p> <code>mode</code> <p>Geospatial filter mode (<code>DIFFERENCE</code> or <code>INTERSECTION</code>)</p> <p> TYPE: <code>GeospatialFilterMode</code> </p>"},{"location":"api_reference/utils/coordinates_filter/geospatial_filter/#aviary.utils.GeospatialFilter.__call__","title":"<code>__call__</code>","text":"<p>Filters the coordinates based on the polygons in the geodataframe.</p> PARAMETER DESCRIPTION <code>coordinates</code> <p>Coordinates (x_min, y_min) of each tile in meters</p> <p> TYPE: <code>CoordinatesSet</code> </p> RETURNS DESCRIPTION <code>CoordinatesSet</code> <p>Coordinates (x_min, y_min) of each tile in meters</p>"},{"location":"api_reference/utils/coordinates_filter/mask_filter/","title":"MaskFilter","text":"<p>View source </p>"},{"location":"api_reference/utils/coordinates_filter/mask_filter/#aviary.utils.MaskFilter","title":"<code>MaskFilter</code>","text":"<p>Coordinates filter that filters based on a boolean mask</p> <p>Implements the <code>CoordinatesFilter</code> protocol.</p> PARAMETER DESCRIPTION <code>mask</code> <p>Boolean mask</p> <p> TYPE: <code>npt.NDArray[np.bool_]</code> </p>"},{"location":"api_reference/utils/coordinates_filter/mask_filter/#aviary.utils.MaskFilter.__call__","title":"<code>__call__</code>","text":"<p>Filters the coordinates based on the boolean mask.</p> PARAMETER DESCRIPTION <code>coordinates</code> <p>Coordinates (x_min, y_min) of each tile in meters</p> <p> TYPE: <code>CoordinatesSet</code> </p> RETURNS DESCRIPTION <code>CoordinatesSet</code> <p>Coordinates (x_min, y_min) of each tile in meters</p>"},{"location":"api_reference/utils/coordinates_filter/set_filter/","title":"SetFilter","text":"<p>View source </p>"},{"location":"api_reference/utils/coordinates_filter/set_filter/#aviary.utils.SetFilter","title":"<code>SetFilter</code>","text":"<p>Coordinates filter that filters based on other coordinates</p> Available modes <ul> <li><code>DIFFERENCE</code>: Removes coordinates that are in the other coordinates</li> <li><code>INTERSECTION</code>: Removes coordinates that are not in the other coordinates</li> <li><code>UNION</code>: Combines the coordinates with the other coordinates and removes duplicate coordinates</li> </ul> <p>Implements the <code>CoordinatesFilter</code> protocol.</p> PARAMETER DESCRIPTION <code>other</code> <p>Other coordinates (x_min, y_min) of each tile in meters</p> <p> TYPE: <code>CoordinatesSet</code> </p> <code>mode</code> <p>Set filter mode (<code>DIFFERENCE</code>, <code>INTERSECTION</code>, or <code>UNION</code>)</p> <p> TYPE: <code>SetFilterMode</code> </p>"},{"location":"api_reference/utils/coordinates_filter/set_filter/#aviary.utils.SetFilter.__call__","title":"<code>__call__</code>","text":"<p>Filters the coordinates based on the other coordinates.</p> PARAMETER DESCRIPTION <code>coordinates</code> <p>Coordinates (x_min, y_min) of each tile in meters</p> <p> TYPE: <code>CoordinatesSet</code> </p> RETURNS DESCRIPTION <code>CoordinatesSet</code> <p>Coordinates (x_min, y_min) of each tile in meters</p>"},{"location":"cli_reference/","title":"CLI Reference","text":"<p>aviary\u2019s CLI includes the following commands:</p> <ul> <li> <p><code>aviary</code>     Show help.</p> </li> <li> <p><code>aviary components</code>     Show the components.</p> </li> <li> <p><code>aviary docs</code>     Open the documentation in a web browser.</p> </li> <li> <p><code>aviary github</code>     Open the GitHub repository in a web browser.</p> </li> <li> <p><code>aviary plugins</code>     Show the registered plugins.</p> </li> <li> <p><code>aviary tile-pipeline</code> <code>aviary tile</code>     Subcommands for the tile pipeline</p> </li> </ul>"},{"location":"cli_reference/aviary/","title":"aviary","text":""},{"location":"cli_reference/aviary/#aviary","title":"<code>aviary</code>","text":"<p>Python Framework for tile-based processing of geospatial data</p>"},{"location":"cli_reference/aviary/#usage","title":"USAGE","text":"<pre><code>aviary [OPTIONS] COMMAND [ARGS]...\n</code></pre>"},{"location":"cli_reference/aviary/#options","title":"OPTIONS","text":"<ul> <li><code>-q, --quiet</code>: Enable quiet mode. (env var: <code>AVIARY_QUIET</code>)</li> <li><code>-v, --verbose</code>: Enable verbose mode. (env var: <code>AVIARY_VERBOSE</code>)</li> <li><code>--version</code>: Show the version of the package and exit.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli_reference/aviary/#general-commands","title":"GENERAL COMMANDS","text":"<ul> <li><code>components</code>: Show the components.</li> <li><code>docs</code>: Open the documentation in a web browser.</li> <li><code>github</code>: Open the GitHub repository in a web browser.</li> <li><code>plugins</code>: Show the registered plugins.</li> </ul>"},{"location":"cli_reference/aviary/#pipeline-commands","title":"PIPELINE COMMANDS","text":"<ul> <li><code>tile-pipeline</code>: Subcommands for the tile pipeline (alias: <code>tile</code>)</li> <li><code>tile</code>: Subcommands for the tile pipeline</li> </ul>"},{"location":"cli_reference/aviary_components/","title":"aviary components","text":""},{"location":"cli_reference/aviary_components/#aviary-components","title":"<code>aviary components</code>","text":"<p>Show the components.</p>"},{"location":"cli_reference/aviary_components/#usage","title":"USAGE","text":"<pre><code>aviary components [OPTIONS]\n</code></pre>"},{"location":"cli_reference/aviary_components/#options","title":"OPTIONS","text":"<ul> <li><code>-p, --package TEXT</code>: Package of the components</li> <li><code>--plugins-dir-path PATH</code>: Path to the plugins directory (env var: <code>AVIARY_PLUGINS_DIR_PATH</code>)</li> <li><code>-t, --type [tile_fetcher|tiles_processor]</code>: Type of the components</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli_reference/aviary_docs/","title":"aviary docs","text":""},{"location":"cli_reference/aviary_docs/#aviary-docs","title":"<code>aviary docs</code>","text":"<p>Open the documentation in a web browser.</p>"},{"location":"cli_reference/aviary_docs/#usage","title":"USAGE","text":"<pre><code>aviary docs [OPTIONS]\n</code></pre>"},{"location":"cli_reference/aviary_docs/#options","title":"OPTIONS","text":"<ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli_reference/aviary_github/","title":"aviary github","text":""},{"location":"cli_reference/aviary_github/#aviary-github","title":"<code>aviary github</code>","text":"<p>Open the GitHub repository in a web browser.</p>"},{"location":"cli_reference/aviary_github/#usage","title":"USAGE","text":"<pre><code>aviary github [OPTIONS]\n</code></pre>"},{"location":"cli_reference/aviary_github/#options","title":"OPTIONS","text":"<ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli_reference/aviary_plugins/","title":"aviary plugins","text":""},{"location":"cli_reference/aviary_plugins/#aviary-plugins","title":"<code>aviary plugins</code>","text":"<p>Show the registered plugins.</p>"},{"location":"cli_reference/aviary_plugins/#usage","title":"USAGE","text":"<pre><code>aviary plugins [OPTIONS]\n</code></pre>"},{"location":"cli_reference/aviary_plugins/#options","title":"OPTIONS","text":"<ul> <li><code>-p, --package TEXT</code>: Package of the components</li> <li><code>--plugins-dir-path PATH</code>: Path to the plugins directory (env var: <code>AVIARY_PLUGINS_DIR_PATH</code>)</li> <li><code>-t, --type [tile_fetcher|tiles_processor]</code>: Type of the components</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli_reference/environment_variables/","title":"Environment Variables","text":""},{"location":"cli_reference/environment_variables/#environment-variables","title":"Environment Variables","text":"<p>aviary\u2019s CLI can be configured using environment variables.</p> Linux and macOSWindows <pre><code>export AVIARY_ENV_VAR=value\n</code></pre> <pre><code>set AVIARY_ENV_VAR=value\n</code></pre>"},{"location":"cli_reference/environment_variables/#aviary_config_path","title":"<code>AVIARY_CONFIG_PATH</code>","text":"<p>Path to the config file</p>"},{"location":"cli_reference/environment_variables/#aviary_log_path","title":"<code>AVIARY_LOG_PATH</code>","text":"<p>Path to the log file</p>"},{"location":"cli_reference/environment_variables/#aviary_plugins_dir_path","title":"<code>AVIARY_PLUGINS_DIR_PATH</code>","text":"<p>Path to the plugins directory</p>"},{"location":"cli_reference/environment_variables/#aviary_quiet","title":"<code>AVIARY_QUIET</code>","text":"<p>Enable quiet mode.</p>"},{"location":"cli_reference/environment_variables/#aviary_verbose","title":"<code>AVIARY_VERBOSE</code>","text":"<p>Enable verbose mode.</p>"},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline/","title":"tile-pipeline","text":""},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline/#aviary-tile-pipeline","title":"<code>aviary tile-pipeline</code>","text":"<p>Subcommands for the tile pipeline</p>"},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline/#usage","title":"USAGE","text":"DefaultAlias <pre><code>aviary tile-pipeline [OPTIONS] COMMAND [ARGS]...\n</code></pre> <pre><code>aviary tile [OPTIONS] COMMAND [ARGS]...\n</code></pre>"},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline/#options","title":"OPTIONS","text":"<ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline/#commands","title":"COMMANDS","text":"<ul> <li><code>components</code>: Show the components.</li> <li><code>config</code>: Show the configuration for a component.</li> <li><code>init</code>: Initialize a config file.</li> <li><code>plugins</code>: Show the registered plugins.</li> <li><code>run</code>: Run the tile pipeline.</li> <li><code>validate</code>: Validate the config file.</li> </ul>"},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline_components/","title":"tile-pipeline components","text":""},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline_components/#aviary-tile-pipeline-components","title":"<code>aviary tile-pipeline components</code>","text":"<p>Show the components.</p>"},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline_components/#usage","title":"USAGE","text":"DefaultAlias <pre><code>aviary tile-pipeline components [OPTIONS]\n</code></pre> <pre><code>aviary tile components [OPTIONS]\n</code></pre>"},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline_components/#options","title":"OPTIONS","text":"<ul> <li><code>-p, --package TEXT</code>: Package of the components</li> <li><code>--plugins-dir-path PATH</code>: Path to the plugins directory (env var: <code>AVIARY_PLUGINS_DIR_PATH</code>)</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline_config/","title":"tile-pipeline config","text":""},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline_config/#aviary-tile-pipeline-config","title":"<code>aviary tile-pipeline config</code>","text":"<p>Show the configuration for a component.</p>"},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline_config/#usage","title":"USAGE","text":"DefaultAlias <pre><code>aviary tile-pipeline config [OPTIONS] COMPONENT\n</code></pre> <pre><code>aviary tile config [OPTIONS] COMPONENT\n</code></pre>"},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline_config/#arguments","title":"ARGUMENTS","text":"<ul> <li><code>COMPONENT</code>: Component</li> </ul>"},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline_config/#options","title":"OPTIONS","text":"<ul> <li><code>-c, --copy</code>: Copy the configuration to the clipboard.</li> <li><code>-l, --level INTEGER</code>: Indentation level - defaults to 0</li> <li><code>-p, --package TEXT</code>: Package of the component - defaults to aviary</li> <li><code>--plugins-dir-path PATH</code>: Path to the plugins directory (env var: <code>AVIARY_PLUGINS_DIR_PATH</code>)</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline_init/","title":"tile-pipeline init","text":""},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline_init/#aviary-tile-pipeline-init","title":"<code>aviary tile-pipeline init</code>","text":"<p>Initialize a config file.</p>"},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline_init/#usage","title":"USAGE","text":"DefaultAlias <pre><code>aviary tile-pipeline init [OPTIONS] CONFIG_PATH\n</code></pre> <pre><code>aviary tile init [OPTIONS] CONFIG_PATH\n</code></pre>"},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline_init/#arguments","title":"ARGUMENTS","text":"<ul> <li><code>CONFIG_PATH</code>: Path to the config file (env var: <code>AVIARY_CONFIG_PATH</code>)</li> </ul>"},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline_init/#options","title":"OPTIONS","text":"<ul> <li><code>-f, --force</code>: Force overwrite the config file if it already exists.</li> <li><code>-t, --template [base]</code>: Template for the config file - defaults to base</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline_plugins/","title":"tile-pipeline plugins","text":""},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline_plugins/#aviary-tile-pipeline-plugins","title":"<code>aviary tile-pipeline plugins</code>","text":"<p>Show the registered plugins.</p>"},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline_plugins/#usage","title":"USAGE","text":"DefaultAlias <pre><code>aviary tile-pipeline plugins [OPTIONS]\n</code></pre> <pre><code>aviary tile plugins [OPTIONS]\n</code></pre>"},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline_plugins/#options","title":"OPTIONS","text":"<ul> <li><code>-p, --package TEXT</code>: Package of the components</li> <li><code>--plugins-dir-path PATH</code>: Path to the plugins directory (env var: <code>AVIARY_PLUGINS_DIR_PATH</code>)</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline_run/","title":"tile-pipeline run","text":""},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline_run/#aviary-tile-pipeline-run","title":"<code>aviary tile-pipeline run</code>","text":"<p>Run the tile pipeline.</p>"},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline_run/#usage","title":"USAGE","text":"DefaultAlias <pre><code>aviary tile-pipeline run [OPTIONS] CONFIG_PATH\n</code></pre> <pre><code>aviary tile run [OPTIONS] CONFIG_PATH\n</code></pre>"},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline_run/#arguments","title":"ARGUMENTS","text":"<ul> <li><code>CONFIG_PATH</code>: Path to the config file (env var: <code>AVIARY_CONFIG_PATH</code>)</li> </ul>"},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline_run/#options","title":"OPTIONS","text":"<ul> <li><code>-s, --set TEXT</code>: Configuration fields using key=value format</li> <li><code>--log-path PATH</code>: Path to the log file (env var: <code>AVIARY_LOG_PATH</code>)</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline_validate/","title":"tile-pipeline validate","text":""},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline_validate/#aviary-tile-pipeline-validate","title":"<code>aviary tile-pipeline validate</code>","text":"<p>Validate the config file.</p>"},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline_validate/#usage","title":"USAGE","text":"DefaultAlias <pre><code>aviary tile-pipeline validate [OPTIONS] CONFIG_PATH\n</code></pre> <pre><code>aviary tile validate [OPTIONS] CONFIG_PATH\n</code></pre>"},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline_validate/#arguments","title":"ARGUMENTS","text":"<ul> <li><code>CONFIG_PATH</code>: Path to the config file (env var: <code>AVIARY_CONFIG_PATH</code>)</li> </ul>"},{"location":"cli_reference/aviary_tile_pipeline/tile_pipeline_validate/#options","title":"OPTIONS","text":"<ul> <li><code>-s, --set TEXT</code>: Configuration fields using key=value format</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"how_to_guides/","title":"How-to Guides","text":"<p>The how-to guides include comprehensive walkthroughs for using aviary:</p> <ul> <li> <p>API     How to use aviary\u2019s Python API</p> </li> <li> <p>CLI     How to use aviary\u2019s CLI</p> </li> <li> <p>Installation     How to install aviary</p> </li> </ul>"},{"location":"how_to_guides/api/how_to_implement_your_own_component/","title":"How to implement your own component","text":""},{"location":"how_to_guides/api/how_to_implement_your_own_component/#how-to-implement-your-own-component","title":"How to implement your own component","text":"<p>Skill level: Intermediate</p> <p>TL;DR</p> <p>Custom components just need to implement their respective protocol.</p> <p>aviary\u2019s components are designed to be modular and extensible. This means that you can easily implement your own components and use them just like the built-in ones.</p> <p>There are the following types of components in aviary:</p> <ul> <li><code>CoordinatesFilter</code></li> <li><code>TileFetcher</code></li> <li><code>TilesProcessor</code></li> </ul> <p>These are protocols that define the methods a component must have. Implementing them is straightforward as they only require you to implement the <code>__call__</code> method.</p>"},{"location":"how_to_guides/api/how_to_implement_your_own_component/#example","title":"Example","text":""},{"location":"how_to_guides/api/how_to_implement_your_own_component/#implement-a-custom-tiles-processor","title":"Implement a custom tiles processor","text":"<p>Let\u2019s implement our own tiles processor called <code>MyTilesProcessor</code>.</p> <p>First, we need to have a look at the <code>TilesProcessor</code> protocol. A tiles processor is a callable that takes a <code>Tiles</code> object, processes it, and returns it.</p> <p>So, we need to implement the <code>__call__</code> method in our class. We can also implement the <code>__init__</code> method to initialize our tiles processor. This is useful if you need to pass any parameters to the tiles processor.</p> my_tiles_processor.py<pre><code>import aviary\n\n\nclass MyTilesProcessor:\n\n    def __init__(\n        self,\n        param_1: int,\n        param_2: str,\n    ) -&gt; None:\n        self._param_1 = param_1\n        self._param_2 = param_2\n\n    def __call__(\n        self,\n        tiles: aviary.Tiles,\n    ) -&gt; aviary.Tiles:\n        # Process the tiles here\n        return tiles\n</code></pre> <p>Now you can use <code>MyTilesProcessor</code> like any other tiles processor in aviary.</p>"},{"location":"how_to_guides/api/how_to_implement_your_own_component/#next-step","title":"Next step","text":"<p>Do you want to use custom components in the CLI? Have a look at the How to register your own component guide.</p>"},{"location":"how_to_guides/cli/how_to_register_your_own_component/","title":"How to register your own component","text":""},{"location":"how_to_guides/cli/how_to_register_your_own_component/#how-to-register-your-own-component","title":"How to register your own component","text":"<p>Skill level: Intermediate</p> <p>TL;DR</p> <p>Custom components need to implement their respective protocol, a config class, and a <code>from_config</code> class method. They\u2019re registered as plugins using their respective registration decorator.</p> <p>Make sure to read the How to implement your own component guide first.</p> <p>Using custom components in aviary\u2019s CLI requires a few additional steps. After implementing the protocol, you need to implement a config class and a <code>from_config</code> class method, so that components can be created from a configuration. The component is then registered as a plugin using its registration decorator. This allows aviary to discover your component dynamically at runtime when using the CLI.</p>"},{"location":"how_to_guides/cli/how_to_register_your_own_component/#example","title":"Example","text":""},{"location":"how_to_guides/cli/how_to_register_your_own_component/#implement-a-config-class-and-a-from_config-class-method","title":"Implement a config class and a <code>from_config</code> class method","text":"<p>If we want to create an instance of our tiles processor from a configuration, we need to implement a config class and a <code>from_config</code> class method.</p> <p>Let\u2019s implement the config class called <code>MyTilesProcessorConfig</code> and the <code>from_config</code> class method. The config class is a Pydantic model that defines the configuration for our tiles processor. In most cases it simply mimics the parameters of the <code>__init__</code> method. When we pass the configuration to the <code>from_config</code> class method, it should return an instance of our tiles processor.</p> my_tiles_processor.py<pre><code>from __future__ import annotations # (1)!\n\nimport aviary\nimport pydantic\n\n\nclass MyTilesProcessorConfig(pydantic.BaseModel):\n    param_1: int\n    param_2: str\n\nclass MyTilesProcessor:\n\n    def __init__(\n        self,\n        param_1: int,\n        param_2: str,\n    ) -&gt; None:\n        self._param_1 = param_1\n        self._param_2 = param_2\n\n    @classmethod\n    def from_config(\n        cls,\n        config: MyTilesProcessorConfig,\n    ) -&gt; MyTilesProcessor:\n        config = config.model_dump()\n        return cls(**config)\n\n    def __call__(\n        self,\n        tiles: aviary.Tiles,\n    ) -&gt; aviary.Tiles:\n        # Process the tiles here\n        return tiles\n</code></pre> <ol> <li>This import is required for correct type hinting of the <code>from_config</code> class method\u2019s return type.</li> </ol> <p>Now you can create an instance of <code>MyTilesProcessor</code> from a configuration.</p>"},{"location":"how_to_guides/cli/how_to_register_your_own_component/#register-a-custom-tiles-processor","title":"Register a custom tiles processor","text":"<p>All we need to do is to register our own tiles processor as a plugin using the <code>register_tiles_processor</code> decorator.</p> my_tiles_processor.py<pre><code>from __future__ import annotations  # (1)!\n\nimport aviary\nimport pydantic\nfrom aviary.tile import register_tiles_processor\n\n\nclass MyTilesProcessorConfig(pydantic.BaseModel):\n    param_1: int\n    param_2: str\n\n@register_tiles_processor(config_class=MyTilesProcessorConfig)\nclass MyTilesProcessor:\n\n    def __init__(\n        self,\n        param_1: int,\n        param_2: str,\n    ) -&gt; None:\n        self._param_1 = param_1\n        self._param_2 = param_2\n\n    @classmethod\n    def from_config(\n        cls,\n        config: MyTilesProcessorConfig,\n    ) -&gt; MyTilesProcessor:\n        config = config.model_dump()\n        return cls(**config)\n\n    def __call__(\n        self,\n        tiles: aviary.Tiles,\n    ) -&gt; aviary.Tiles:\n        # Process the tiles here\n        return tiles\n</code></pre> <ol> <li>This import is required for correct type hinting of the <code>from_config</code> class method\u2019s return type.</li> </ol> <p>We need to create an <code>__init__.py</code> file in the root of the plugins directory \u2013 this is the directory containing <code>my_tiles_processor.py</code> \u2013 to make it a package. In this file, we import the custom tiles processor.</p> __init__.py<pre><code>from .my_tiles_processor import MyTilesProcessor\n</code></pre> <p>To use it in the CLI, we need to specify the path to the plugins directory in the config file.</p> config.yaml<pre><code>plugins_dir_path: /path/to/our/plugins_dir\n\n# Configure the pipeline here\n</code></pre> <p>Now you can use <code>MyTilesProcessor</code> like any other tiles processor in aviary.</p>"},{"location":"how_to_guides/cli/how_to_register_your_own_component/#verify-the-registration-of-a-custom-tiles-processor","title":"Verify the registration of a custom tiles processor","text":"<p>To verify that our own tiles processor was registered successfully, we can use the <code>aviary plugins</code> command.</p> <pre><code>aviary plugins --plugins-dir-path /path/to/our/plugins_dir\n</code></pre> <p>This shows the registered plugins.</p>"},{"location":"how_to_guides/installation/how_to_install_aviary_with_docker/","title":"How to install aviary with Docker","text":""},{"location":"how_to_guides/installation/how_to_install_aviary_with_docker/#how-to-install-aviary-with-docker","title":"How to install aviary with Docker","text":"<p>Skill level: Beginner</p> <p>TL;DR</p> <p>Use <code>docker pull ghcr.io/geospaitial-lab/aviary</code> to install aviary\u2019s CLI.</p> <p>Docker offers a simple way to use aviary\u2019s CLI in a containerized environment. This approach is ideal for users who want to run the pipelines on systems where installing software directly is not feasible or in distributed environments where the use of containers is necessary.</p>"},{"location":"how_to_guides/installation/how_to_install_aviary_with_docker/#install-docker","title":"Install Docker","text":"<p>First, make sure Docker is installed on your system.</p> <p>Download Docker from the official Docker website . If you need help, you can refer to the official Docker installation guide .</p>"},{"location":"how_to_guides/installation/how_to_install_aviary_with_docker/#install-aviary","title":"Install aviary","text":"<p>Install aviary using Docker.</p> <p>Warning</p> <p>aviary is currently released as a pre-release version. To install the latest version, you need to explicitly specify its sha tag:</p> <pre><code>docker pull ghcr.io/geospaitial-lab/aviary:SHA_TAG\n</code></pre> <pre><code>docker pull ghcr.io/geospaitial-lab/aviary\n</code></pre> <p>We recommend shortening the image name by tagging it with a custom name \u2013 in this case, <code>aviary</code>.</p> <pre><code>docker tag ghcr.io/geospaitial-lab/aviary aviary\n</code></pre>"},{"location":"how_to_guides/installation/how_to_install_aviary_with_docker/#verify-the-installation","title":"Verify the installation","text":"<p>To verify that aviary was installed successfully, you can check the version.</p> <pre><code>docker run --rm aviary --version\n</code></pre> <p>This shows the version of aviary.</p>"},{"location":"how_to_guides/installation/how_to_install_aviary_with_pip/","title":"How to install aviary with pip","text":""},{"location":"how_to_guides/installation/how_to_install_aviary_with_pip/#how-to-install-aviary-with-pip","title":"How to install aviary with pip","text":"<p>Skill level: Beginner</p> <p>TL;DR</p> <p>Use <code>pip install geospaitial-lab-aviary</code> to install aviary. To include the CLI, use <code>pip install geospaitial-lab-aviary[cli]</code>.</p> <p>The most common and convenient way to install aviary is using pip \u2013 Python\u2019s built-in package manager.</p>"},{"location":"how_to_guides/installation/how_to_install_aviary_with_pip/#install-python","title":"Install Python","text":"<p>First, make sure Python 3.10, 3.11, or 3.12 is installed on your system.</p> <p>Download Python from the official Python website . If you need help, you can refer to the official Python installation guide .</p>"},{"location":"how_to_guides/installation/how_to_install_aviary_with_pip/#set-up-a-virtual-environment","title":"Set up a virtual environment","text":"<p>It is considered best practice to use a virtual environment to install Python packages. This keeps your project dependencies isolated.</p> <p>Navigate to the directory where you want to install aviary and create a virtual environment.</p> <pre><code>python -m venv venv\n</code></pre> <p>Next, activate the virtual environment.</p> Linux and macOSWindows <pre><code>source venv/bin/activate\n</code></pre> <pre><code>venv\\Scripts\\activate\n</code></pre> <p>Once activated, you should see its name \u2013 in this case, <code>venv</code> \u2013 in your terminal prompt.</p>"},{"location":"how_to_guides/installation/how_to_install_aviary_with_pip/#install-aviary","title":"Install aviary","text":"<p>Install aviary using pip.</p> <p>Warning</p> <p>aviary is currently released as a pre-release version. To install the latest version, you need to explicitly specify its version:</p> <pre><code>pip install geospaitial-lab-aviary==VERSION\n</code></pre> Default+ CLI+ All <pre><code>pip install geospaitial-lab-aviary\n</code></pre> <pre><code>pip install geospaitial-lab-aviary[cli]\n</code></pre> <pre><code>pip install geospaitial-lab-aviary[all]\n</code></pre> <p>Note that there are optional dependency groups:</p> <ul> <li><code>cli</code>: Required for aviary\u2019s CLI</li> <li><code>all</code>: Includes optional dependencies, such as <code>cli</code></li> </ul>"},{"location":"how_to_guides/installation/how_to_install_aviary_with_pip/#verify-the-installation","title":"Verify the installation","text":"<p>To verify that aviary was installed successfully, you can check the version.</p> Python APICLI <pre><code>import aviary\n\nprint(aviary.__version__)\n</code></pre> <pre><code>aviary --version\n</code></pre> <p>This shows the version of aviary.</p>"},{"location":"how_to_guides/installation/how_to_install_aviary_with_uv/","title":"How to install aviary with uv","text":""},{"location":"how_to_guides/installation/how_to_install_aviary_with_uv/#how-to-install-aviary-with-uv","title":"How to install aviary with uv","text":"<p>Skill level: Beginner</p> <p>TL;DR</p> <p>Use <code>uv pip install geospaitial-lab-aviary</code> to install aviary. To include the CLI, use <code>uv pip install geospaitial-lab-aviary[cli]</code>. For CLI-only, use <code>uv tool install geospaitial-lab-aviary[cli]</code>.</p> <p>The recommended way to install aviary is using uv \u2013 a Python package and project manager that simplifies the installation and management of Python packages, their dependencies, and even Python itself.</p>"},{"location":"how_to_guides/installation/how_to_install_aviary_with_uv/#install-uv","title":"Install uv","text":"<p>First, make sure uv is installed on your system.</p> <p>Download uv from the official uv website . If you need help, you can refer to the official uv installation guide .</p>"},{"location":"how_to_guides/installation/how_to_install_aviary_with_uv/#install-aviary","title":"Install aviary","text":"<p>With uv, you can install aviary in different ways depending on your needs and preferences.</p>"},{"location":"how_to_guides/installation/how_to_install_aviary_with_uv/#install-aviary-using-uv-pip","title":"Install aviary using uv pip","text":"<p>uv includes a drop-in replacement for pip - Python\u2019s built-in package manager - so you can use it to install aviary just like you would with pip.</p>"},{"location":"how_to_guides/installation/how_to_install_aviary_with_uv/#set-up-a-virtual-environment","title":"Set up a virtual environment","text":"<p>It is considered best practice to use a virtual environment to install Python packages. This keeps your project dependencies isolated.</p> <p>Navigate to the directory where you want to install aviary and create a virtual environment.</p> <pre><code>uv venv venv --python 3.12\n</code></pre> <p>Next, activate the virtual environment.</p> Linux and macOSWindows <pre><code>source venv/bin/activate\n</code></pre> <pre><code>venv\\Scripts\\activate\n</code></pre> <p>Once activated, you should see its name \u2013 in this case, <code>venv</code> \u2013 in your terminal prompt.</p>"},{"location":"how_to_guides/installation/how_to_install_aviary_with_uv/#install-aviary_1","title":"Install aviary","text":"<p>Install aviary using uv pip.</p> <p>Warning</p> <p>aviary is currently released as a pre-release version. To install the latest version, you need to explicitly specify its version:</p> <pre><code>uv pip install geospaitial-lab-aviary==VERSION\n</code></pre> Default+ CLI+ All <pre><code>uv pip install geospaitial-lab-aviary\n</code></pre> <pre><code>uv pip install geospaitial-lab-aviary[cli]\n</code></pre> <pre><code>uv pip install geospaitial-lab-aviary[all]\n</code></pre> <p>Note that there are optional dependency groups:</p> <ul> <li><code>cli</code>: Required for aviary\u2019s CLI</li> <li><code>all</code>: Includes optional dependencies, such as <code>cli</code></li> </ul>"},{"location":"how_to_guides/installation/how_to_install_aviary_with_uv/#install-aviary-using-uv-tool","title":"Install aviary using uv tool","text":"<p>In case you only need the CLI, aviary can be installed globally as a tool.</p> <p>Warning</p> <p>aviary is currently released as a pre-release version. To install the latest version, you need to explicitly specify its version:</p> <pre><code>uv tool install geospaitial-lab-aviary==VERSION\n</code></pre> <pre><code>uv tool install geospaitial-lab-aviary[cli]\n</code></pre> <p>For more information, you can refer to the official uv tool documentation .</p>"},{"location":"how_to_guides/installation/how_to_install_aviary_with_uv/#install-aviary-using-uv-add","title":"Install aviary using uv add","text":"<p>If you already use an uv-managed project, you can simply add aviary.</p> <p>Warning</p> <p>aviary is currently released as a pre-release version. To install the latest version, you need to explicitly specify its version:</p> <pre><code>uv add geospaitial-lab-aviary==VERSION\n</code></pre> Default+ CLI+ All <pre><code>uv add geospaitial-lab-aviary\n</code></pre> <pre><code>uv add geospaitial-lab-aviary[cli]\n</code></pre> <pre><code>uv add geospaitial-lab-aviary[all]\n</code></pre> <p>Note that there are optional dependency groups:</p> <ul> <li><code>cli</code>: Required for aviary\u2019s CLI</li> <li><code>all</code>: Includes optional dependencies, such as <code>cli</code></li> </ul> <p>For more information, you can refer to the official uv projects documentation .</p>"},{"location":"how_to_guides/installation/how_to_install_aviary_with_uv/#verify-the-installation","title":"Verify the installation","text":"<p>To verify that aviary was installed successfully, you can check the version.</p> Python APICLI <pre><code>import aviary\n\nprint(aviary.__version__)\n</code></pre> <pre><code>aviary --version\n</code></pre> <p>This shows the version of aviary.</p>"}]}